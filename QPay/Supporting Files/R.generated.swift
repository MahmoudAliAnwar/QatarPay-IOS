//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 9 storyboards.
  struct storyboard {
    /// Storyboard `Charity`.
    static let charity = _R.storyboard.charity()
    /// Storyboard `EShops`.
    static let eShops = _R.storyboard.eShops()
    /// Storyboard `Information`.
    static let information = _R.storyboard.information()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MyLibrary`.
    static let myLibrary = _R.storyboard.myLibrary()
    /// Storyboard `Others`.
    static let others = _R.storyboard.others()
    /// Storyboard `Store`.
    static let store = _R.storyboard.store()
    /// Storyboard `Transports`.
    static let transports = _R.storyboard.transports()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Charity", bundle: ...)`
    static func charity(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.charity)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "EShops", bundle: ...)`
    static func eShops(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.eShops)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Information", bundle: ...)`
    static func information(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.information)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MyLibrary", bundle: ...)`
    static func myLibrary(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myLibrary)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Others", bundle: ...)`
    static func others(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.others)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Store", bundle: ...)`
    static func store(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.store)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Transports", bundle: ...)`
    static func transports(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.transports)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 51 colors.
  struct color {
    /// Color `Yellow`.
    static let yellow = Rswift.ColorResource(bundle: R.hostingBundle, name: "Yellow")
    /// Color `amount_awqaf`.
    static let amount_awqaf = Rswift.ColorResource(bundle: R.hostingBundle, name: "amount_awqaf")
    /// Color `amount_eid`.
    static let amount_eid = Rswift.ColorResource(bundle: R.hostingBundle, name: "amount_eid")
    /// Color `amount_qatar_black`.
    static let amount_qatar_black = Rswift.ColorResource(bundle: R.hostingBundle, name: "amount_qatar_black")
    /// Color `amount_qatar`.
    static let amount_qatar = Rswift.ColorResource(bundle: R.hostingBundle, name: "amount_qatar")
    /// Color `app_color`.
    static let app_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "app_color")
    /// Color `brown`.
    static let brown = Rswift.ColorResource(bundle: R.hostingBundle, name: "brown")
    /// Color `card_number`.
    static let card_number = Rswift.ColorResource(bundle: R.hostingBundle, name: "card_number")
    /// Color `cart_awqaf_green`.
    static let cart_awqaf_green = Rswift.ColorResource(bundle: R.hostingBundle, name: "cart_awqaf_green")
    /// Color `cart_eid_red`.
    static let cart_eid_red = Rswift.ColorResource(bundle: R.hostingBundle, name: "cart_eid_red")
    /// Color `cart_qatar_charity_pink`.
    static let cart_qatar_charity_pink = Rswift.ColorResource(bundle: R.hostingBundle, name: "cart_qatar_charity_pink")
    /// Color `cart_qatar_crescent_red`.
    static let cart_qatar_crescent_red = Rswift.ColorResource(bundle: R.hostingBundle, name: "cart_qatar_crescent_red")
    /// Color `chart_bills`.
    static let chart_bills = Rswift.ColorResource(bundle: R.hostingBundle, name: "chart_bills")
    /// Color `chart_charity`.
    static let chart_charity = Rswift.ColorResource(bundle: R.hostingBundle, name: "chart_charity")
    /// Color `chart_e_shops`.
    static let chart_e_shops = Rswift.ColorResource(bundle: R.hostingBundle, name: "chart_e_shops")
    /// Color `chart_shopping`.
    static let chart_shopping = Rswift.ColorResource(bundle: R.hostingBundle, name: "chart_shopping")
    /// Color `chart_transport`.
    static let chart_transport = Rswift.ColorResource(bundle: R.hostingBundle, name: "chart_transport")
    /// Color `chart_wallet`.
    static let chart_wallet = Rswift.ColorResource(bundle: R.hostingBundle, name: "chart_wallet")
    /// Color `dark_blue`.
    static let dark_blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "dark_blue")
    /// Color `dark_gray`.
    static let dark_gray = Rswift.ColorResource(bundle: R.hostingBundle, name: "dark_gray")
    /// Color `dark_red`.
    static let dark_red = Rswift.ColorResource(bundle: R.hostingBundle, name: "dark_red")
    /// Color `drop_down_placeholder`.
    static let drop_down_placeholder = Rswift.ColorResource(bundle: R.hostingBundle, name: "drop_down_placeholder")
    /// Color `error_red`.
    static let error_red = Rswift.ColorResource(bundle: R.hostingBundle, name: "error_red")
    /// Color `gift_background_gray`.
    static let gift_background_gray = Rswift.ColorResource(bundle: R.hostingBundle, name: "gift_background_gray")
    /// Color `gold`.
    static let gold = Rswift.ColorResource(bundle: R.hostingBundle, name: "gold")
    /// Color `green_success`.
    static let green_success = Rswift.ColorResource(bundle: R.hostingBundle, name: "green_success")
    /// Color `green`.
    static let green = Rswift.ColorResource(bundle: R.hostingBundle, name: "green")
    /// Color `kahramaa_dark_blue`.
    static let kahramaa_dark_blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "kahramaa_dark_blue")
    /// Color `karwa_dark_red`.
    static let karwa_dark_red = Rswift.ColorResource(bundle: R.hostingBundle, name: "karwa_dark_red")
    /// Color `label_dark_gray`.
    static let label_dark_gray = Rswift.ColorResource(bundle: R.hostingBundle, name: "label_dark_gray")
    /// Color `label_light_gray`.
    static let label_light_gray = Rswift.ColorResource(bundle: R.hostingBundle, name: "label_light_gray")
    /// Color `light_blue`.
    static let light_blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "light_blue")
    /// Color `light_gray`.
    static let light_gray = Rswift.ColorResource(bundle: R.hostingBundle, name: "light_gray")
    /// Color `light_red`.
    static let light_red = Rswift.ColorResource(bundle: R.hostingBundle, name: "light_red")
    /// Color `main_bg_blue`.
    static let main_bg_blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "main_bg_blue")
    /// Color `my_book_background_gray`.
    static let my_book_background_gray = Rswift.ColorResource(bundle: R.hostingBundle, name: "my_book_background_gray")
    /// Color `my_book_blue`.
    static let my_book_blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "my_book_blue")
    /// Color `my_book_green`.
    static let my_book_green = Rswift.ColorResource(bundle: R.hostingBundle, name: "my_book_green")
    /// Color `my_book_orange`.
    static let my_book_orange = Rswift.ColorResource(bundle: R.hostingBundle, name: "my_book_orange")
    /// Color `my_book_red`.
    static let my_book_red = Rswift.ColorResource(bundle: R.hostingBundle, name: "my_book_red")
    /// Color `my_book_selected_tab`.
    static let my_book_selected_tab = Rswift.ColorResource(bundle: R.hostingBundle, name: "my_book_selected_tab")
    /// Color `my_book_teal`.
    static let my_book_teal = Rswift.ColorResource(bundle: R.hostingBundle, name: "my_book_teal")
    /// Color `my_red`.
    static let my_red = Rswift.ColorResource(bundle: R.hostingBundle, name: "my_red")
    /// Color `orange`.
    static let orange = Rswift.ColorResource(bundle: R.hostingBundle, name: "orange")
    /// Color `parkings_dark_red`.
    static let parkings_dark_red = Rswift.ColorResource(bundle: R.hostingBundle, name: "parkings_dark_red")
    /// Color `parkings_light_red`.
    static let parkings_light_red = Rswift.ColorResource(bundle: R.hostingBundle, name: "parkings_light_red")
    /// Color `shop_bg_gray`.
    static let shop_bg_gray = Rswift.ColorResource(bundle: R.hostingBundle, name: "shop_bg_gray")
    /// Color `stock_dark_green`.
    static let stock_dark_green = Rswift.ColorResource(bundle: R.hostingBundle, name: "stock_dark_green")
    /// Color `stock_light_green`.
    static let stock_light_green = Rswift.ColorResource(bundle: R.hostingBundle, name: "stock_light_green")
    /// Color `stocks_blue`.
    static let stocks_blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "stocks_blue")
    /// Color `very_dark_blue`.
    static let very_dark_blue = Rswift.ColorResource(bundle: R.hostingBundle, name: "very_dark_blue")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Yellow", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "amount_awqaf", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func amount_awqaf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.amount_awqaf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "amount_eid", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func amount_eid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.amount_eid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "amount_qatar", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func amount_qatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.amount_qatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "amount_qatar_black", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func amount_qatar_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.amount_qatar_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "app_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func app_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.app_color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "brown", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func brown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.brown, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "card_number", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func card_number(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.card_number, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cart_awqaf_green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cart_awqaf_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cart_awqaf_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cart_eid_red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cart_eid_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cart_eid_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cart_qatar_charity_pink", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cart_qatar_charity_pink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cart_qatar_charity_pink, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cart_qatar_crescent_red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cart_qatar_crescent_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cart_qatar_crescent_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "chart_bills", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func chart_bills(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.chart_bills, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "chart_charity", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func chart_charity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.chart_charity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "chart_e_shops", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func chart_e_shops(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.chart_e_shops, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "chart_shopping", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func chart_shopping(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.chart_shopping, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "chart_transport", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func chart_transport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.chart_transport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "chart_wallet", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func chart_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.chart_wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "dark_blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func dark_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.dark_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "dark_gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func dark_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.dark_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "dark_red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func dark_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.dark_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "drop_down_placeholder", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func drop_down_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.drop_down_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "error_red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func error_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.error_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gift_background_gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gift_background_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gift_background_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "gold", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gold(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gold, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "green_success", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green_success, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "kahramaa_dark_blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func kahramaa_dark_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.kahramaa_dark_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "karwa_dark_red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func karwa_dark_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.karwa_dark_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "label_dark_gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func label_dark_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.label_dark_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "label_light_gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func label_light_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.label_light_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "light_blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func light_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.light_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "light_gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func light_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.light_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "light_red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func light_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.light_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "main_bg_blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func main_bg_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.main_bg_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "my_book_background_gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func my_book_background_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.my_book_background_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "my_book_blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func my_book_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.my_book_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "my_book_green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func my_book_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.my_book_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "my_book_orange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func my_book_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.my_book_orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "my_book_red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func my_book_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.my_book_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "my_book_selected_tab", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func my_book_selected_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.my_book_selected_tab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "my_book_teal", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func my_book_teal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.my_book_teal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "my_red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func my_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.my_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "orange", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "parkings_dark_red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func parkings_dark_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.parkings_dark_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "parkings_light_red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func parkings_light_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.parkings_light_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "shop_bg_gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shop_bg_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shop_bg_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "stock_dark_green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func stock_dark_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.stock_dark_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "stock_light_green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func stock_light_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.stock_light_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "stocks_blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func stocks_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.stocks_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "very_dark_blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func very_dark_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.very_dark_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Yellow", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func yellow(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.yellow.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "amount_awqaf", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func amount_awqaf(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.amount_awqaf.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "amount_eid", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func amount_eid(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.amount_eid.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "amount_qatar", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func amount_qatar(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.amount_qatar.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "amount_qatar_black", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func amount_qatar_black(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.amount_qatar_black.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "app_color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func app_color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.app_color.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "brown", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func brown(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.brown.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "card_number", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func card_number(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.card_number.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cart_awqaf_green", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cart_awqaf_green(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cart_awqaf_green.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cart_eid_red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cart_eid_red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cart_eid_red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cart_qatar_charity_pink", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cart_qatar_charity_pink(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cart_qatar_charity_pink.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "cart_qatar_crescent_red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func cart_qatar_crescent_red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.cart_qatar_crescent_red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "chart_bills", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func chart_bills(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.chart_bills.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "chart_charity", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func chart_charity(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.chart_charity.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "chart_e_shops", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func chart_e_shops(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.chart_e_shops.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "chart_shopping", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func chart_shopping(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.chart_shopping.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "chart_transport", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func chart_transport(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.chart_transport.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "chart_wallet", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func chart_wallet(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.chart_wallet.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "dark_blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func dark_blue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.dark_blue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "dark_gray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func dark_gray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.dark_gray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "dark_red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func dark_red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.dark_red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "drop_down_placeholder", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func drop_down_placeholder(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.drop_down_placeholder.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "error_red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func error_red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.error_red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "gift_background_gray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gift_background_gray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gift_background_gray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "gold", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func gold(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.gold.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "green_success", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green_success(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green_success.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "kahramaa_dark_blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func kahramaa_dark_blue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.kahramaa_dark_blue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "karwa_dark_red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func karwa_dark_red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.karwa_dark_red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "label_dark_gray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func label_dark_gray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.label_dark_gray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "label_light_gray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func label_light_gray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.label_light_gray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "light_blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func light_blue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.light_blue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "light_gray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func light_gray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.light_gray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "light_red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func light_red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.light_red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "main_bg_blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func main_bg_blue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.main_bg_blue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "my_book_background_gray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func my_book_background_gray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.my_book_background_gray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "my_book_blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func my_book_blue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.my_book_blue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "my_book_green", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func my_book_green(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.my_book_green.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "my_book_orange", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func my_book_orange(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.my_book_orange.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "my_book_red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func my_book_red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.my_book_red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "my_book_selected_tab", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func my_book_selected_tab(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.my_book_selected_tab.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "my_book_teal", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func my_book_teal(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.my_book_teal.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "my_red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func my_red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.my_red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "orange", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orange(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orange.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "parkings_dark_red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func parkings_dark_red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.parkings_dark_red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "parkings_light_red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func parkings_light_red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.parkings_light_red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "shop_bg_gray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shop_bg_gray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shop_bg_gray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "stock_dark_green", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func stock_dark_green(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.stock_dark_green.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "stock_light_green", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func stock_light_green(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.stock_light_green.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "stocks_blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func stocks_blue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.stocks_blue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "very_dark_blue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func very_dark_blue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.very_dark_blue.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 30 files.
  struct file {
    /// Resource file `CreditCard.ttf`.
    static let creditCardTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "CreditCard", pathExtension: "ttf")
    /// Resource file `GeosansLight.ttf`.
    static let geosansLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GeosansLight", pathExtension: "ttf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Gotham Pro Bold.ttf`.
    static let gothamProBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham Pro Bold", pathExtension: "ttf")
    /// Resource file `Gotham Pro Medium.ttf`.
    static let gothamProMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham Pro Medium", pathExtension: "ttf")
    /// Resource file `Gotham-Black.otf`.
    static let gothamBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-Black", pathExtension: "otf")
    /// Resource file `Gotham-Bold.otf`.
    static let gothamBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-Bold", pathExtension: "otf")
    /// Resource file `Gotham-Book.otf`.
    static let gothamBookOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-Book", pathExtension: "otf")
    /// Resource file `Gotham-BookItalic.otf`.
    static let gothamBookItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-BookItalic", pathExtension: "otf")
    /// Resource file `Gotham-Light.otf`.
    static let gothamLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-Light", pathExtension: "otf")
    /// Resource file `Gotham-Medium.otf`.
    static let gothamMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-Medium", pathExtension: "otf")
    /// Resource file `Gotham-Thin.otf`.
    static let gothamThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-Thin", pathExtension: "otf")
    /// Resource file `Gotham-ThinItalic.otf`.
    static let gothamThinItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-ThinItalic", pathExtension: "otf")
    /// Resource file `Gotham-UltraItalic.otf`.
    static let gothamUltraItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-UltraItalic", pathExtension: "otf")
    /// Resource file `Gotham-XLight.otf`.
    static let gothamXLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-XLight", pathExtension: "otf")
    /// Resource file `Gotham-XLightItalic.otf`.
    static let gothamXLightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Gotham-XLightItalic", pathExtension: "otf")
    /// Resource file `GothamPro.otf`.
    static let gothamProOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "GothamPro", pathExtension: "otf")
    /// Resource file `MODENINE.TTF`.
    static let modeninettF = Rswift.FileResource(bundle: R.hostingBundle, name: "MODENINE", pathExtension: "TTF")
    /// Resource file `TheSans-bold.otf`.
    static let theSansBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "TheSans-bold", pathExtension: "otf")
    /// Resource file `TheSans-plain.ttf`.
    static let theSansPlainTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "TheSans-plain", pathExtension: "ttf")
    /// Resource file `loading.gif`.
    static let loadingGif = Rswift.FileResource(bundle: R.hostingBundle, name: "loading", pathExtension: "gif")
    /// Resource file `sf-ui-display-black.otf`.
    static let sfUiDisplayBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-black", pathExtension: "otf")
    /// Resource file `sf-ui-display-bold.otf`.
    static let sfUiDisplayBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-bold", pathExtension: "otf")
    /// Resource file `sf-ui-display-heavy.otf`.
    static let sfUiDisplayHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-heavy", pathExtension: "otf")
    /// Resource file `sf-ui-display-light.otf`.
    static let sfUiDisplayLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-light", pathExtension: "otf")
    /// Resource file `sf-ui-display-medium.otf`.
    static let sfUiDisplayMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-medium", pathExtension: "otf")
    /// Resource file `sf-ui-display-regular.otf`.
    static let sfUiDisplayRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-regular", pathExtension: "otf")
    /// Resource file `sf-ui-display-semibold.otf`.
    static let sfUiDisplaySemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-semibold", pathExtension: "otf")
    /// Resource file `sf-ui-display-thin.otf`.
    static let sfUiDisplayThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-thin", pathExtension: "otf")
    /// Resource file `sf-ui-display-ultralight.otf`.
    static let sfUiDisplayUltralightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sf-ui-display-ultralight", pathExtension: "otf")

    /// `bundle.url(forResource: "CreditCard", withExtension: "ttf")`
    static func creditCardTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.creditCardTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GeosansLight", withExtension: "ttf")`
    static func geosansLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.geosansLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gotham Pro Bold", withExtension: "ttf")`
    static func gothamProBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gotham Pro Medium", withExtension: "ttf")`
    static func gothamProMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gotham-Black", withExtension: "otf")`
    static func gothamBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gotham-Bold", withExtension: "otf")`
    static func gothamBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gotham-Book", withExtension: "otf")`
    static func gothamBookOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamBookOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gotham-BookItalic", withExtension: "otf")`
    static func gothamBookItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamBookItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gotham-Light", withExtension: "otf")`
    static func gothamLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gotham-Medium", withExtension: "otf")`
    static func gothamMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gotham-Thin", withExtension: "otf")`
    static func gothamThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gotham-ThinItalic", withExtension: "otf")`
    static func gothamThinItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamThinItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gotham-UltraItalic", withExtension: "otf")`
    static func gothamUltraItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamUltraItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gotham-XLight", withExtension: "otf")`
    static func gothamXLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamXLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Gotham-XLightItalic", withExtension: "otf")`
    static func gothamXLightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamXLightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GothamPro", withExtension: "otf")`
    static func gothamProOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.gothamProOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MODENINE", withExtension: "TTF")`
    static func modeninettF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.modeninettF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TheSans-bold", withExtension: "otf")`
    static func theSansBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.theSansBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TheSans-plain", withExtension: "ttf")`
    static func theSansPlainTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.theSansPlainTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading", withExtension: "gif")`
    static func loadingGif(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loadingGif
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-black", withExtension: "otf")`
    static func sfUiDisplayBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-bold", withExtension: "otf")`
    static func sfUiDisplayBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-heavy", withExtension: "otf")`
    static func sfUiDisplayHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-light", withExtension: "otf")`
    static func sfUiDisplayLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-medium", withExtension: "otf")`
    static func sfUiDisplayMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-regular", withExtension: "otf")`
    static func sfUiDisplayRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-semibold", withExtension: "otf")`
    static func sfUiDisplaySemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplaySemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-thin", withExtension: "otf")`
    static func sfUiDisplayThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sf-ui-display-ultralight", withExtension: "otf")`
    static func sfUiDisplayUltralightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfUiDisplayUltralightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 28 fonts.
  struct font: Rswift.Validatable {
    /// Font `CreditCard`.
    static let creditCard = Rswift.FontResource(fontName: "CreditCard")
    /// Font `GeosansLight`.
    static let geosansLight = Rswift.FontResource(fontName: "GeosansLight")
    /// Font `Gotham-Black`.
    static let gothamBlack = Rswift.FontResource(fontName: "Gotham-Black")
    /// Font `Gotham-BookItalic`.
    static let gothamBookItalic = Rswift.FontResource(fontName: "Gotham-BookItalic")
    /// Font `Gotham-Book`.
    static let gothamBook = Rswift.FontResource(fontName: "Gotham-Book")
    /// Font `Gotham-Light`.
    static let gothamLight = Rswift.FontResource(fontName: "Gotham-Light")
    /// Font `Gotham-Medium`.
    static let gothamMedium = Rswift.FontResource(fontName: "Gotham-Medium")
    /// Font `Gotham-ThinItalic`.
    static let gothamThinItalic = Rswift.FontResource(fontName: "Gotham-ThinItalic")
    /// Font `Gotham-Thin`.
    static let gothamThin = Rswift.FontResource(fontName: "Gotham-Thin")
    /// Font `Gotham-UltraItalic`.
    static let gothamUltraItalic = Rswift.FontResource(fontName: "Gotham-UltraItalic")
    /// Font `Gotham-XLightItalic`.
    static let gothamXLightItalic = Rswift.FontResource(fontName: "Gotham-XLightItalic")
    /// Font `Gotham-XLight`.
    static let gothamXLight = Rswift.FontResource(fontName: "Gotham-XLight")
    /// Font `GothamPro-Medium`.
    static let gothamProMedium = Rswift.FontResource(fontName: "GothamPro-Medium")
    /// Font `GothamPro`.
    static let gothamPro = Rswift.FontResource(fontName: "GothamPro")
    /// Font `ModeNine`.
    static let modeNine = Rswift.FontResource(fontName: "ModeNine")
    /// Font `SFUIDisplay-Black`.
    static let sfuiDisplayBlack = Rswift.FontResource(fontName: "SFUIDisplay-Black")
    /// Font `SFUIDisplay-Bold`.
    static let sfuiDisplayBold = Rswift.FontResource(fontName: "SFUIDisplay-Bold")
    /// Font `SFUIDisplay-Heavy`.
    static let sfuiDisplayHeavy = Rswift.FontResource(fontName: "SFUIDisplay-Heavy")
    /// Font `SFUIDisplay-Light`.
    static let sfuiDisplayLight = Rswift.FontResource(fontName: "SFUIDisplay-Light")
    /// Font `SFUIDisplay-Medium`.
    static let sfuiDisplayMedium = Rswift.FontResource(fontName: "SFUIDisplay-Medium")
    /// Font `SFUIDisplay-Regular`.
    static let sfuiDisplayRegular = Rswift.FontResource(fontName: "SFUIDisplay-Regular")
    /// Font `SFUIDisplay-Semibold`.
    static let sfuiDisplaySemibold = Rswift.FontResource(fontName: "SFUIDisplay-Semibold")
    /// Font `SFUIDisplay-Thin`.
    static let sfuiDisplayThin = Rswift.FontResource(fontName: "SFUIDisplay-Thin")
    /// Font `SFUIDisplay-Ultralight`.
    static let sfuiDisplayUltralight = Rswift.FontResource(fontName: "SFUIDisplay-Ultralight")
    /// Font `TheSans-BoldPlain`.
    static let theSansBoldPlain = Rswift.FontResource(fontName: "TheSans-BoldPlain")
    /// Font `TheSansPlain`.
    static let theSansPlain = Rswift.FontResource(fontName: "TheSansPlain")

    /// `UIFont(name: "CreditCard", size: ...)`
    static func creditCard(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: creditCard, size: size)
    }

    /// `UIFont(name: "GeosansLight", size: ...)`
    static func geosansLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: geosansLight, size: size)
    }

    /// `UIFont(name: "Gotham-Black", size: ...)`
    static func gothamBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamBlack, size: size)
    }

    /// `UIFont(name: "Gotham-Book", size: ...)`
    static func gothamBook(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamBook, size: size)
    }

    /// `UIFont(name: "Gotham-BookItalic", size: ...)`
    static func gothamBookItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamBookItalic, size: size)
    }

    /// `UIFont(name: "Gotham-Light", size: ...)`
    static func gothamLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamLight, size: size)
    }

    /// `UIFont(name: "Gotham-Medium", size: ...)`
    static func gothamMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamMedium, size: size)
    }

    /// `UIFont(name: "Gotham-Thin", size: ...)`
    static func gothamThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamThin, size: size)
    }

    /// `UIFont(name: "Gotham-ThinItalic", size: ...)`
    static func gothamThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamThinItalic, size: size)
    }

    /// `UIFont(name: "Gotham-UltraItalic", size: ...)`
    static func gothamUltraItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamUltraItalic, size: size)
    }

    /// `UIFont(name: "Gotham-XLight", size: ...)`
    static func gothamXLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamXLight, size: size)
    }

    /// `UIFont(name: "Gotham-XLightItalic", size: ...)`
    static func gothamXLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamXLightItalic, size: size)
    }

    /// `UIFont(name: "GothamPro", size: ...)`
    static func gothamPro(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamPro, size: size)
    }

    /// `UIFont(name: "GothamPro-Medium", size: ...)`
    static func gothamProMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: gothamProMedium, size: size)
    }

    /// `UIFont(name: "ModeNine", size: ...)`
    static func modeNine(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: modeNine, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Black", size: ...)`
    static func sfuiDisplayBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayBlack, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Bold", size: ...)`
    static func sfuiDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayBold, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Heavy", size: ...)`
    static func sfuiDisplayHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayHeavy, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Light", size: ...)`
    static func sfuiDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayLight, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Medium", size: ...)`
    static func sfuiDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayMedium, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Regular", size: ...)`
    static func sfuiDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayRegular, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Semibold", size: ...)`
    static func sfuiDisplaySemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplaySemibold, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Thin", size: ...)`
    static func sfuiDisplayThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayThin, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Ultralight", size: ...)`
    static func sfuiDisplayUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayUltralight, size: size)
    }

    /// `UIFont(name: "TheSans-BoldPlain", size: ...)`
    static func theSansBoldPlain(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: theSansBoldPlain, size: size)
    }

    /// `UIFont(name: "TheSansPlain", size: ...)`
    static func theSansPlain(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: theSansPlain, size: size)
    }

    static func validate() throws {
      if R.font.creditCard(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'CreditCard' could not be loaded, is 'CreditCard.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.geosansLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GeosansLight' could not be loaded, is 'GeosansLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gotham-Black' could not be loaded, is 'Gotham-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamBook(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gotham-Book' could not be loaded, is 'Gotham-Book.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamBookItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gotham-BookItalic' could not be loaded, is 'Gotham-BookItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gotham-Light' could not be loaded, is 'Gotham-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gotham-Medium' could not be loaded, is 'Gotham-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gotham-Thin' could not be loaded, is 'Gotham-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gotham-ThinItalic' could not be loaded, is 'Gotham-ThinItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamUltraItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gotham-UltraItalic' could not be loaded, is 'Gotham-UltraItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamXLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gotham-XLight' could not be loaded, is 'Gotham-XLight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamXLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Gotham-XLightItalic' could not be loaded, is 'Gotham-XLightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamPro(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro' could not be loaded, is 'GothamPro.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.gothamProMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'GothamPro-Medium' could not be loaded, is 'Gotham Pro Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.modeNine(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ModeNine' could not be loaded, is 'MODENINE.TTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Black' could not be loaded, is 'sf-ui-display-black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Bold' could not be loaded, is 'sf-ui-display-bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Heavy' could not be loaded, is 'sf-ui-display-heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Light' could not be loaded, is 'sf-ui-display-light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Medium' could not be loaded, is 'sf-ui-display-medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Regular' could not be loaded, is 'sf-ui-display-regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplaySemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Semibold' could not be loaded, is 'sf-ui-display-semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Thin' could not be loaded, is 'sf-ui-display-thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Ultralight' could not be loaded, is 'sf-ui-display-ultralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.theSansBoldPlain(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'TheSans-BoldPlain' could not be loaded, is 'TheSans-bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.theSansPlain(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'TheSansPlain' could not be loaded, is 'TheSans-plain.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 390 images.
  struct image {
    /// Image `amount_circle_awqaf`.
    static let amount_circle_awqaf = Rswift.ImageResource(bundle: R.hostingBundle, name: "amount_circle_awqaf")
    /// Image `bank_container_my_library`.
    static let bank_container_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "bank_container_my_library")
    /// Image `bbg_btn_my_shop_add_item`.
    static let bbg_btn_my_shop_add_item = Rswift.ImageResource(bundle: R.hostingBundle, name: "bbg_btn_my_shop_add_item")
    /// Image `bg_Information_analytics`.
    static let bg_Information_analytics = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_Information_analytics")
    /// Image `bg_about_app`.
    static let bg_about_app = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_about_app")
    /// Image `bg_add_bank`.
    static let bg_add_bank = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_add_bank")
    /// Image `bg_add_kahramaa_bills`.
    static let bg_add_kahramaa_bills = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_add_kahramaa_bills")
    /// Image `bg_add_metro_card`.
    static let bg_add_metro_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_add_metro_card")
    /// Image `bg_add_phone_bills`.
    static let bg_add_phone_bills = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_add_phone_bills")
    /// Image `bg_analytics_blue`.
    static let bg_analytics_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_analytics_blue")
    /// Image `bg_analytics_red`.
    static let bg_analytics_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_analytics_red")
    /// Image `bg_analytics`.
    static let bg_analytics = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_analytics")
    /// Image `bg_awqaf`.
    static let bg_awqaf = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_awqaf")
    /// Image `bg_beneficiaries`.
    static let bg_beneficiaries = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_beneficiaries")
    /// Image `bg_bottom_karwa`.
    static let bg_bottom_karwa = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_bottom_karwa")
    /// Image `bg_btn_login`.
    static let bg_btn_login = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_btn_login")
    /// Image `bg_btn_pay`.
    static let bg_btn_pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_btn_pay")
    /// Image `bg_btn_qmobile`.
    static let bg_btn_qmobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_btn_qmobile")
    /// Image `bg_btn_stocks`.
    static let bg_btn_stocks = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_btn_stocks")
    /// Image `bg_button_parkings_payment`.
    static let bg_button_parkings_payment = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_button_parkings_payment")
    /// Image `bg_card_details`.
    static let bg_card_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_card_details")
    /// Image `bg_charity_analytics`.
    static let bg_charity_analytics = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_charity_analytics")
    /// Image `bg_circle_payment_parkings`.
    static let bg_circle_payment_parkings = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_circle_payment_parkings")
    /// Image `bg_circle_ticket_parkings`.
    static let bg_circle_ticket_parkings = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_circle_ticket_parkings")
    /// Image `bg_circle_topup_estore`.
    static let bg_circle_topup_estore = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_circle_topup_estore")
    /// Image `bg_confirm_transfer`.
    static let bg_confirm_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_confirm_transfer")
    /// Image `bg_contacts_us`.
    static let bg_contacts_us = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_contacts_us")
    /// Image `bg_create_invoice2`.
    static let bg_create_invoice2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_create_invoice2")
    /// Image `bg_create_invoice`.
    static let bg_create_invoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_create_invoice")
    /// Image `bg_create_shop`.
    static let bg_create_shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_create_shop")
    /// Image `bg_credit_card`.
    static let bg_credit_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_credit_card")
    /// Image `bg_donation_cart`.
    static let bg_donation_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_donation_cart")
    /// Image `bg_drop_off_location`.
    static let bg_drop_off_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_drop_off_location")
    /// Image `bg_e-shops_analytics`.
    static let bg_eShops_analytics = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_e-shops_analytics")
    /// Image `bg_edit_saved_topup`.
    static let bg_edit_saved_topup = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_edit_saved_topup")
    /// Image `bg_eid_charity`.
    static let bg_eid_charity = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_eid_charity")
    /// Image `bg_error_message`.
    static let bg_error_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_error_message")
    /// Image `bg_gift_cards`.
    static let bg_gift_cards = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_gift_cards")
    /// Image `bg_home_bar_bottom`.
    static let bg_home_bar_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_home_bar_bottom")
    /// Image `bg_ice_cream_my_book`.
    static let bg_ice_cream_my_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_ice_cream_my_book")
    /// Image `bg_invoice_view`.
    static let bg_invoice_view = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_invoice_view")
    /// Image `bg_invoices`.
    static let bg_invoices = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_invoices")
    /// Image `bg_kahramaa_bills`.
    static let bg_kahramaa_bills = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_kahramaa_bills")
    /// Image `bg_karwa_card_details`.
    static let bg_karwa_card_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_karwa_card_details")
    /// Image `bg_karwa`.
    static let bg_karwa = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_karwa")
    /// Image `bg_left_circle`.
    static let bg_left_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_left_circle")
    /// Image `bg_login`.
    static let bg_login = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_login")
    /// Image `bg_lunch_screen`.
    static let bg_lunch_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_lunch_screen")
    /// Image `bg_metro_rail`.
    static let bg_metro_rail = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_metro_rail")
    /// Image `bg_middle_circle`.
    static let bg_middle_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_middle_circle")
    /// Image `bg_money_transfer`.
    static let bg_money_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_money_transfer")
    /// Image `bg_my_book_product`.
    static let bg_my_book_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_my_book_product")
    /// Image `bg_my_book`.
    static let bg_my_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_my_book")
    /// Image `bg_my_card`.
    static let bg_my_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_my_card")
    /// Image `bg_my_orders`.
    static let bg_my_orders = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_my_orders")
    /// Image `bg_my_shop_add_item`.
    static let bg_my_shop_add_item = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_my_shop_add_item")
    /// Image `bg_my_shop`.
    static let bg_my_shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_my_shop")
    /// Image `bg_my_shops`.
    static let bg_my_shops = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_my_shops")
    /// Image `bg_ooredoo_phone`.
    static let bg_ooredoo_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_ooredoo_phone")
    /// Image `bg_order_details`.
    static let bg_order_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_order_details")
    /// Image `bg_parkings`.
    static let bg_parkings = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_parkings")
    /// Image `bg_passport_details`.
    static let bg_passport_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_passport_details")
    /// Image `bg_passport`.
    static let bg_passport = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_passport")
    /// Image `bg_pay_and_go`.
    static let bg_pay_and_go = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_pay_and_go")
    /// Image `bg_pay_on_go_phone`.
    static let bg_pay_on_go_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_pay_on_go_phone")
    /// Image `bg_pay_on_the_go_qatar_cool`.
    static let bg_pay_on_the_go_qatar_cool = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_pay_on_the_go_qatar_cool")
    /// Image `bg_pay_trip`.
    static let bg_pay_trip = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_pay_trip")
    /// Image `bg_pay_via_cash`.
    static let bg_pay_via_cash = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_pay_via_cash")
    /// Image `bg_payment_method`.
    static let bg_payment_method = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_payment_method")
    /// Image `bg_payment_parkings`.
    static let bg_payment_parkings = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_payment_parkings")
    /// Image `bg_payment_request_top`.
    static let bg_payment_request_top = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_payment_request_top")
    /// Image `bg_pearl_services`.
    static let bg_pearl_services = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_pearl_services")
    /// Image `bg_phone_bills`.
    static let bg_phone_bills = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_phone_bills")
    /// Image `bg_preview_invoice`.
    static let bg_preview_invoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_preview_invoice")
    /// Image `bg_public_products`.
    static let bg_public_products = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_public_products")
    /// Image `bg_qatar_charity`.
    static let bg_qatar_charity = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_qatar_charity")
    /// Image `bg_qatar_cool`.
    static let bg_qatar_cool = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_qatar_cool")
    /// Image `bg_qatar_red`.
    static let bg_qatar_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_qatar_red")
    /// Image `bg_qatar`.
    static let bg_qatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_qatar")
    /// Image `bg_qmobile`.
    static let bg_qmobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_qmobile")
    /// Image `bg_qr_code`.
    static let bg_qr_code = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_qr_code")
    /// Image `bg_refill_wallet`.
    static let bg_refill_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_refill_wallet")
    /// Image `bg_right_circle`.
    static let bg_right_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_right_circle")
    /// Image `bg_select_account`.
    static let bg_select_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_select_account")
    /// Image `bg_settings`.
    static let bg_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_settings")
    /// Image `bg_shop_profile`.
    static let bg_shop_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_shop_profile")
    /// Image `bg_square_upload_passport`.
    static let bg_square_upload_passport = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_square_upload_passport")
    /// Image `bg_stocks_curve`.
    static let bg_stocks_curve = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_stocks_curve")
    /// Image `bg_stocks`.
    static let bg_stocks = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_stocks")
    /// Image `bg_success_message`.
    static let bg_success_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_success_message")
    /// Image `bg_top_home`.
    static let bg_top_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_top_home")
    /// Image `bg_transactions`.
    static let bg_transactions = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_transactions")
    /// Image `bg_transports_analytics`.
    static let bg_transports_analytics = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_transports_analytics")
    /// Image `bg_utilites_analytics`.
    static let bg_utilites_analytics = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_utilites_analytics")
    /// Image `bg_view_qid`.
    static let bg_view_qid = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_view_qid")
    /// Image `bg_vodafone_phone`.
    static let bg_vodafone_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_vodafone_phone")
    /// Image `credit_card_container_my_library`.
    static let credit_card_container_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "credit_card_container_my_library")
    /// Image `debit_card_container_my_library`.
    static let debit_card_container_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "debit_card_container_my_library")
    /// Image `documents_container_my_library`.
    static let documents_container_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "documents_container_my_library")
    /// Image `driving_container_my_library`.
    static let driving_container_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "driving_container_my_library")
    /// Image `ic transfer_home`.
    static let icTransfer_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic transfer_home")
    /// Image `ic_add_kahramaa`.
    static let ic_add_kahramaa = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_kahramaa")
    /// Image `ic_add_my_shops`.
    static let ic_add_my_shops = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_my_shops")
    /// Image `ic_add_number_phone`.
    static let ic_add_number_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_number_phone")
    /// Image `ic_add_qatar_cool`.
    static let ic_add_qatar_cool = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add_qatar_cool")
    /// Image `ic_adv_banner_my_book`.
    static let ic_adv_banner_my_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_adv_banner_my_book")
    /// Image `ic_adv_banner_topup_estore`.
    static let ic_adv_banner_topup_estore = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_adv_banner_topup_estore")
    /// Image `ic_american_express_checkout`.
    static let ic_american_express_checkout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_american_express_checkout")
    /// Image `ic_arrow_awqaf`.
    static let ic_arrow_awqaf = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_awqaf")
    /// Image `ic_arrow_down_gray`.
    static let ic_arrow_down_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_down_gray")
    /// Image `ic_arrow_down_my_book_product`.
    static let ic_arrow_down_my_book_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_down_my_book_product")
    /// Image `ic_arrow_down_transfer`.
    static let ic_arrow_down_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_down_transfer")
    /// Image `ic_arrow_eid`.
    static let ic_arrow_eid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_eid")
    /// Image `ic_arrow_fill_down_transfer`.
    static let ic_arrow_fill_down_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_fill_down_transfer")
    /// Image `ic_arrow_money_transfer`.
    static let ic_arrow_money_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_money_transfer")
    /// Image `ic_arrow_qatar_charity`.
    static let ic_arrow_qatar_charity = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_qatar_charity")
    /// Image `ic_arrow_qatar_red`.
    static let ic_arrow_qatar_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_qatar_red")
    /// Image `ic_arrow_request_car`.
    static let ic_arrow_request_car = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_request_car")
    /// Image `ic_arrow_right_kahramaa`.
    static let ic_arrow_right_kahramaa = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_right_kahramaa")
    /// Image `ic_arrow_right_transfer`.
    static let ic_arrow_right_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_right_transfer")
    /// Image `ic_arrow_settings`.
    static let ic_arrow_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_settings")
    /// Image `ic_arrow_up_my_book_product`.
    static let ic_arrow_up_my_book_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_arrow_up_my_book_product")
    /// Image `ic_avatar_photo`.
    static let ic_avatar_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_avatar_photo")
    /// Image `ic_avatar`.
    static let ic_avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_avatar")
    /// Image `ic_back_black`.
    static let ic_back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back_black")
    /// Image `ic_back`.
    static let ic_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_back")
    /// Image `ic_bank_account_library`.
    static let ic_bank_account_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bank_account_library")
    /// Image `ic_bank_add_card_white`.
    static let ic_bank_add_card_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bank_add_card_white")
    /// Image `ic_bank_add_card`.
    static let ic_bank_add_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bank_add_card")
    /// Image `ic_bank_tab_my_library`.
    static let ic_bank_tab_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bank_tab_my_library")
    /// Image `ic_bank`.
    static let ic_bank = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bank")
    /// Image `ic_banner_shop_profile`.
    static let ic_banner_shop_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_banner_shop_profile")
    /// Image `ic_beneficiaries_money_transfer`.
    static let ic_beneficiaries_money_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_beneficiaries_money_transfer")
    /// Image `ic_beneficiaries_transfer`.
    static let ic_beneficiaries_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_beneficiaries_transfer")
    /// Image `ic_bill`.
    static let ic_bill = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bill")
    /// Image `ic_black_card_home`.
    static let ic_black_card_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_black_card_home")
    /// Image `ic_black_clock_my_library`.
    static let ic_black_clock_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_black_clock_my_library")
    /// Image `ic_blue_card_home`.
    static let ic_blue_card_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_blue_card_home")
    /// Image `ic_calender_qmobile`.
    static let ic_calender_qmobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calender_qmobile")
    /// Image `ic_calender`.
    static let ic_calender = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calender")
    /// Image `ic_call_limousine`.
    static let ic_call_limousine = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_call_limousine")
    /// Image `ic_camera_back_uploadQID`.
    static let ic_camera_back_uploadQID = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera_back_uploadQID")
    /// Image `ic_camera_front_uploadQID`.
    static let ic_camera_front_uploadQID = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera_front_uploadQID")
    /// Image `ic_camera_shop_profile`.
    static let ic_camera_shop_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera_shop_profile")
    /// Image `ic_camera_upload_passport`.
    static let ic_camera_upload_passport = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_camera_upload_passport")
    /// Image `ic_car_request_car`.
    static let ic_car_request_car = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_car_request_car")
    /// Image `ic_card_karwa`.
    static let ic_card_karwa = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_card_karwa")
    /// Image `ic_card_metro`.
    static let ic_card_metro = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_card_metro")
    /// Image `ic_card_my_card`.
    static let ic_card_my_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_card_my_card")
    /// Image `ic_card_uploadQID`.
    static let ic_card_uploadQID = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_card_uploadQID")
    /// Image `ic_card`.
    static let ic_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_card")
    /// Image `ic_cards_tab_my_library`.
    static let ic_cards_tab_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cards_tab_my_library")
    /// Image `ic_cart_donation_cart`.
    static let ic_cart_donation_cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart_donation_cart")
    /// Image `ic_cart_eid`.
    static let ic_cart_eid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart_eid")
    /// Image `ic_cart_qatar_charity`.
    static let ic_cart_qatar_charity = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart_qatar_charity")
    /// Image `ic_cart_qatar_red`.
    static let ic_cart_qatar_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart_qatar_red")
    /// Image `ic_cart_transactions`.
    static let ic_cart_transactions = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cart_transactions")
    /// Image `ic_cash_request_car`.
    static let ic_cash_request_car = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_cash_request_car")
    /// Image `ic_check_success_message`.
    static let ic_check_success_message = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check_success_message")
    /// Image `ic_chip_add_card`.
    static let ic_chip_add_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chip_add_card")
    /// Image `ic_chip_card`.
    static let ic_chip_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_chip_card")
    /// Image `ic_clock_passport_details`.
    static let ic_clock_passport_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_clock_passport_details")
    /// Image `ic_close_reset_pin`.
    static let ic_close_reset_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close_reset_pin")
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_coins_parkings`.
    static let ic_coins_parkings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_coins_parkings")
    /// Image `ic_contact_home`.
    static let ic_contact_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_contact_home")
    /// Image `ic_contact_us_settings`.
    static let ic_contact_us_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_contact_us_settings")
    /// Image `ic_create_account_check`.
    static let ic_create_account_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_create_account_check")
    /// Image `ic_create_account_house`.
    static let ic_create_account_house = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_create_account_house")
    /// Image `ic_create_account_mobile`.
    static let ic_create_account_mobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_create_account_mobile")
    /// Image `ic_create_group_phone_bills`.
    static let ic_create_group_phone_bills = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_create_group_phone_bills")
    /// Image `ic_create_group_qatar_cool`.
    static let ic_create_group_qatar_cool = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_create_group_qatar_cool")
    /// Image `ic_create_group`.
    static let ic_create_group = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_create_group")
    /// Image `ic_credit_card_payment_method`.
    static let ic_credit_card_payment_method = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_credit_card_payment_method")
    /// Image `ic_credit_card_white`.
    static let ic_credit_card_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_credit_card_white")
    /// Image `ic_credit_card`.
    static let ic_credit_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_credit_card")
    /// Image `ic_debit_card_payAndGo`.
    static let ic_debit_card_payAndGo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_debit_card_payAndGo")
    /// Image `ic_debit_card_white`.
    static let ic_debit_card_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_debit_card_white")
    /// Image `ic_debit_card`.
    static let ic_debit_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_debit_card")
    /// Image `ic_delete_invoice`.
    static let ic_delete_invoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_invoice")
    /// Image `ic_delete_item`.
    static let ic_delete_item = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_item")
    /// Image `ic_documents_library`.
    static let ic_documents_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_documents_library")
    /// Image `ic_documents_tab_my_library`.
    static let ic_documents_tab_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_documents_tab_my_library")
    /// Image `ic_edit_invoice`.
    static let ic_edit_invoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit_invoice")
    /// Image `ic_edit_my_shops`.
    static let ic_edit_my_shops = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit_my_shops")
    /// Image `ic_edit_qmobile`.
    static let ic_edit_qmobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit_qmobile")
    /// Image `ic_edit`.
    static let ic_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit")
    /// Image `ic_ellipses_black`.
    static let ic_ellipses_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ellipses_black")
    /// Image `ic_ellipses`.
    static let ic_ellipses = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ellipses")
    /// Image `ic_email_contact_us`.
    static let ic_email_contact_us = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email_contact_us")
    /// Image `ic_email_red_send_invoice`.
    static let ic_email_red_send_invoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email_red_send_invoice")
    /// Image `ic_email_transfer`.
    static let ic_email_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email_transfer")
    /// Image `ic_email_white_send_invoice`.
    static let ic_email_white_send_invoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email_white_send_invoice")
    /// Image `ic_email`.
    static let ic_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email")
    /// Image `ic_emptyTransaction_home`.
    static let ic_emptyTransaction_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_emptyTransaction_home")
    /// Image `ic_empty_limousine`.
    static let ic_empty_limousine = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_empty_limousine")
    /// Image `ic_empty_my_library`.
    static let ic_empty_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_empty_my_library")
    /// Image `ic_empty_numbers_kahramaa`.
    static let ic_empty_numbers_kahramaa = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_empty_numbers_kahramaa")
    /// Image `ic_empty_orders`.
    static let ic_empty_orders = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_empty_orders")
    /// Image `ic_empty_products`.
    static let ic_empty_products = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_empty_products")
    /// Image `ic_empty_shop`.
    static let ic_empty_shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_empty_shop")
    /// Image `ic_empty_tab_my_library`.
    static let ic_empty_tab_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_empty_tab_my_library")
    /// Image `ic_enter_pin`.
    static let ic_enter_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_enter_pin")
    /// Image `ic_error_circle_invoices`.
    static let ic_error_circle_invoices = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_error_circle_invoices")
    /// Image `ic_error_circle`.
    static let ic_error_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_error_circle")
    /// Image `ic_favourites_my_book`.
    static let ic_favourites_my_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_favourites_my_book")
    /// Image `ic_filter_invoices`.
    static let ic_filter_invoices = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_filter_invoices")
    /// Image `ic_finger_print`.
    static let ic_finger_print = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_finger_print")
    /// Image `ic_food_my_book`.
    static let ic_food_my_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_food_my_book")
    /// Image `ic_food_white_qatar_tabs`.
    static let ic_food_white_qatar_tabs = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_food_white_qatar_tabs")
    /// Image `ic_food_yellow_qatar_tabs`.
    static let ic_food_yellow_qatar_tabs = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_food_yellow_qatar_tabs")
    /// Image `ic_gallery_upload_passport`.
    static let ic_gallery_upload_passport = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_gallery_upload_passport")
    /// Image `ic_gallery`.
    static let ic_gallery = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_gallery")
    /// Image `ic_game_img_gift_cards`.
    static let ic_game_img_gift_cards = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_game_img_gift_cards")
    /// Image `ic_gear`.
    static let ic_gear = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_gear")
    /// Image `ic_go_create_group`.
    static let ic_go_create_group = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_go_create_group")
    /// Image `ic_halal_my_book_product`.
    static let ic_halal_my_book_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_halal_my_book_product")
    /// Image `ic_health_white_qatar_tabs`.
    static let ic_health_white_qatar_tabs = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_health_white_qatar_tabs")
    /// Image `ic_health_yellow_qatar_tabs`.
    static let ic_health_yellow_qatar_tabs = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_health_yellow_qatar_tabs")
    /// Image `ic_home_my_book`.
    static let ic_home_my_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_my_book")
    /// Image `ic_ice_cream_my_book`.
    static let ic_ice_cream_my_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ice_cream_my_book")
    /// Image `ic_id_card_library`.
    static let ic_id_card_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_id_card_library")
    /// Image `ic_id_license_tab_my_library`.
    static let ic_id_license_tab_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_id_license_tab_my_library")
    /// Image `ic_indoor_my_book_product`.
    static let ic_indoor_my_book_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_indoor_my_book_product")
    /// Image `ic_information_seperator_analytics`.
    static let ic_information_seperator_analytics = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_information_seperator_analytics")
    /// Image `ic_international_photo_topup_estore`.
    static let ic_international_photo_topup_estore = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_international_photo_topup_estore")
    /// Image `ic_international_topup_estore`.
    static let ic_international_topup_estore = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_international_topup_estore")
    /// Image `ic_invite_settings`.
    static let ic_invite_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_invite_settings")
    /// Image `ic_invoice_analytics`.
    static let ic_invoice_analytics = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_invoice_analytics")
    /// Image `ic_invoice_my_shop`.
    static let ic_invoice_my_shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_invoice_my_shop")
    /// Image `ic_invoices_my_shops`.
    static let ic_invoices_my_shops = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_invoices_my_shops")
    /// Image `ic_itunes_img_gift_cards`.
    static let ic_itunes_img_gift_cards = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_itunes_img_gift_cards")
    /// Image `ic_karwa_smart_card`.
    static let ic_karwa_smart_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_karwa_smart_card")
    /// Image `ic_license_library`.
    static let ic_license_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_license_library")
    /// Image `ic_line_drop_off_location`.
    static let ic_line_drop_off_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_line_drop_off_location")
    /// Image `ic_link_red_send_invoice`.
    static let ic_link_red_send_invoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_link_red_send_invoice")
    /// Image `ic_link_white_send_invoice`.
    static let ic_link_white_send_invoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_link_white_send_invoice")
    /// Image `ic_list_karwa_taxi`.
    static let ic_list_karwa_taxi = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_list_karwa_taxi")
    /// Image `ic_local_white_qatar_tabs`.
    static let ic_local_white_qatar_tabs = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_local_white_qatar_tabs")
    /// Image `ic_local_yellow_qatar_tabs`.
    static let ic_local_yellow_qatar_tabs = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_local_yellow_qatar_tabs")
    /// Image `ic_location_drop_off_location`.
    static let ic_location_drop_off_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_location_drop_off_location")
    /// Image `ic_lock_reset_pin`.
    static let ic_lock_reset_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_lock_reset_pin")
    /// Image `ic_lock_settings`.
    static let ic_lock_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_lock_settings")
    /// Image `ic_logo_checkout`.
    static let ic_logo_checkout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo_checkout")
    /// Image `ic_logo_my_book`.
    static let ic_logo_my_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo_my_book")
    /// Image `ic_logo_shop_profile`.
    static let ic_logo_shop_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo_shop_profile")
    /// Image `ic_logout_home`.
    static let ic_logout_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logout_home")
    /// Image `ic_logout_settings`.
    static let ic_logout_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logout_settings")
    /// Image `ic_loyalty_card_library`.
    static let ic_loyalty_card_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_loyalty_card_library")
    /// Image `ic_map_contacts_us`.
    static let ic_map_contacts_us = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_map_contacts_us")
    /// Image `ic_map_drop_off_location`.
    static let ic_map_drop_off_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_map_drop_off_location")
    /// Image `ic_maroon_card_home`.
    static let ic_maroon_card_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_maroon_card_home")
    /// Image `ic_mastercard_card_details`.
    static let ic_mastercard_card_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mastercard_card_details")
    /// Image `ic_mastercard_logo_card`.
    static let ic_mastercard_logo_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mastercard_logo_card")
    /// Image `ic_mastercard_my_library`.
    static let ic_mastercard_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mastercard_my_library")
    /// Image `ic_mastercard`.
    static let ic_mastercard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mastercard")
    /// Image `ic_menu_drop_off_location`.
    static let ic_menu_drop_off_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_menu_drop_off_location")
    /// Image `ic_metro_rail_card`.
    static let ic_metro_rail_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_metro_rail_card")
    /// Image `ic_minus_invoice`.
    static let ic_minus_invoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_minus_invoice")
    /// Image `ic_mobile_contact_us`.
    static let ic_mobile_contact_us = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mobile_contact_us")
    /// Image `ic_mobile_qid`.
    static let ic_mobile_qid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mobile_qid")
    /// Image `ic_mobile_transfer`.
    static let ic_mobile_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mobile_transfer")
    /// Image `ic_money_invoices`.
    static let ic_money_invoices = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_money_invoices")
    /// Image `ic_money_parkings`.
    static let ic_money_parkings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_money_parkings")
    /// Image `ic_my_library_home`.
    static let ic_my_library_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_library_home")
    /// Image `ic_my_shop`.
    static let ic_my_shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_shop")
    /// Image `ic_my_wallet_home`.
    static let ic_my_wallet_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_my_wallet_home")
    /// Image `ic_naps_checkout`.
    static let ic_naps_checkout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_naps_checkout")
    /// Image `ic_noqs_home`.
    static let ic_noqs_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_noqs_home")
    /// Image `ic_notifications_my_book`.
    static let ic_notifications_my_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notifications_my_book")
    /// Image `ic_ooredoo_checkout`.
    static let ic_ooredoo_checkout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ooredoo_checkout")
    /// Image `ic_ooredoo_money_checkout`.
    static let ic_ooredoo_money_checkout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ooredoo_money_checkout")
    /// Image `ic_ooredoo_money_payment_method`.
    static let ic_ooredoo_money_payment_method = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ooredoo_money_payment_method")
    /// Image `ic_ooredoo_payment_method`.
    static let ic_ooredoo_payment_method = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ooredoo_payment_method")
    /// Image `ic_ooredoo_topup_estore`.
    static let ic_ooredoo_topup_estore = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ooredoo_topup_estore")
    /// Image `ic_or_pay`.
    static let ic_or_pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_or_pay")
    /// Image `ic_or_refill_karwa_card`.
    static let ic_or_refill_karwa_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_or_refill_karwa_card")
    /// Image `ic_other_services_parkings`.
    static let ic_other_services_parkings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_other_services_parkings")
    /// Image `ic_outlet_my_book`.
    static let ic_outlet_my_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_outlet_my_book")
    /// Image `ic_parking_my_book_product`.
    static let ic_parking_my_book_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_parking_my_book_product")
    /// Image `ic_passenger_request_car`.
    static let ic_passenger_request_car = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_passenger_request_car")
    /// Image `ic_passport_library`.
    static let ic_passport_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_passport_library")
    /// Image `ic_passport_tab_my_library`.
    static let ic_passport_tab_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_passport_tab_my_library")
    /// Image `ic_passport`.
    static let ic_passport = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_passport")
    /// Image `ic_password`.
    static let ic_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_password")
    /// Image `ic_pay_money_transfer`.
    static let ic_pay_money_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pay_money_transfer")
    /// Image `ic_pay_on_the_go`.
    static let ic_pay_on_the_go = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pay_on_the_go")
    /// Image `ic_pay_your_parking`.
    static let ic_pay_your_parking = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pay_your_parking")
    /// Image `ic_paypal_checkout`.
    static let ic_paypal_checkout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_paypal_checkout")
    /// Image `ic_paypal_payment_method`.
    static let ic_paypal_payment_method = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_paypal_payment_method")
    /// Image `ic_person_settings`.
    static let ic_person_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_person_settings")
    /// Image `ic_person`.
    static let ic_person = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_person")
    /// Image `ic_phonebook`.
    static let ic_phonebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_phonebook")
    /// Image `ic_plus_invoice`.
    static let ic_plus_invoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus_invoice")
    /// Image `ic_plus_my_library`.
    static let ic_plus_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus_my_library")
    /// Image `ic_plus_my_shop`.
    static let ic_plus_my_shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus_my_shop")
    /// Image `ic_plus_phone_bills`.
    static let ic_plus_phone_bills = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus_phone_bills")
    /// Image `ic_plus_stocks`.
    static let ic_plus_stocks = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_plus_stocks")
    /// Image `ic_profile_my_book`.
    static let ic_profile_my_book = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_profile_my_book")
    /// Image `ic_promo_request_car`.
    static let ic_promo_request_car = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_promo_request_car")
    /// Image `ic_promotions_parkings`.
    static let ic_promotions_parkings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_promotions_parkings")
    /// Image `ic_qatar_flag_gift_purchase`.
    static let ic_qatar_flag_gift_purchase = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_qatar_flag_gift_purchase")
    /// Image `ic_qatar_flag_transfer`.
    static let ic_qatar_flag_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_qatar_flag_transfer")
    /// Image `ic_qatar_pay_checkout`.
    static let ic_qatar_pay_checkout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_qatar_pay_checkout")
    /// Image `ic_qid`.
    static let ic_qid = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_qid")
    /// Image `ic_qpan_transfer`.
    static let ic_qpan_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_qpan_transfer")
    /// Image `ic_qr_code_home`.
    static let ic_qr_code_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_qr_code_home")
    /// Image `ic_qr_code_settings`.
    static let ic_qr_code_settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_qr_code_settings")
    /// Image `ic_qrcode_shape`.
    static let ic_qrcode_shape = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_qrcode_shape")
    /// Image `ic_qrcode_transfer`.
    static let ic_qrcode_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_qrcode_transfer")
    /// Image `ic_red_clock_my_library`.
    static let ic_red_clock_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_red_clock_my_library")
    /// Image `ic_red_trash_my_products`.
    static let ic_red_trash_my_products = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_red_trash_my_products")
    /// Image `ic_redeem_code_parkings`.
    static let ic_redeem_code_parkings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_redeem_code_parkings")
    /// Image `ic_request_money_transfer`.
    static let ic_request_money_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_request_money_transfer")
    /// Image `ic_safe_area`.
    static let ic_safe_area = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_safe_area")
    /// Image `ic_sand_clock_invoices`.
    static let ic_sand_clock_invoices = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sand_clock_invoices")
    /// Image `ic_scanQR_pay`.
    static let ic_scanQR_pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_scanQR_pay")
    /// Image `ic_scanQR`.
    static let ic_scanQR = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_scanQR")
    /// Image `ic_scan_barcode_parkings`.
    static let ic_scan_barcode_parkings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_scan_barcode_parkings")
    /// Image `ic_scan_card`.
    static let ic_scan_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_scan_card")
    /// Image `ic_scan_my_card`.
    static let ic_scan_my_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_scan_my_card")
    /// Image `ic_scan_qpan_add_beneficiaries`.
    static let ic_scan_qpan_add_beneficiaries = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_scan_qpan_add_beneficiaries")
    /// Image `ic_scan_qr_code`.
    static let ic_scan_qr_code = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_scan_qr_code")
    /// Image `ic_scan_qr_parkings`.
    static let ic_scan_qr_parkings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_scan_qr_parkings")
    /// Image `ic_scan_to_pay`.
    static let ic_scan_to_pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_scan_to_pay")
    /// Image `ic_scan_transfer`.
    static let ic_scan_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_scan_transfer")
    /// Image `ic_schedule_request_car`.
    static let ic_schedule_request_car = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_schedule_request_car")
    /// Image `ic_search_my_shops`.
    static let ic_search_my_shops = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_search_my_shops")
    /// Image `ic_seperator_limousine`.
    static let ic_seperator_limousine = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_seperator_limousine")
    /// Image `ic_share_my_book_product`.
    static let ic_share_my_book_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_my_book_product")
    /// Image `ic_share_my_shops`.
    static let ic_share_my_shops = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share_my_shops")
    /// Image `ic_share`.
    static let ic_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_share")
    /// Image `ic_shelter_white_qatar_tabs`.
    static let ic_shelter_white_qatar_tabs = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_shelter_white_qatar_tabs")
    /// Image `ic_shelter_yellow_qatar_tabs`.
    static let ic_shelter_yellow_qatar_tabs = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_shelter_yellow_qatar_tabs")
    /// Image `ic_shop_analytics`.
    static let ic_shop_analytics = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_shop_analytics")
    /// Image `ic_shop_home`.
    static let ic_shop_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_shop_home")
    /// Image `ic_show_password`.
    static let ic_show_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_show_password")
    /// Image `ic_signature_pen`.
    static let ic_signature_pen = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_signature_pen")
    /// Image `ic_signature`.
    static let ic_signature = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_signature")
    /// Image `ic_slider_img_parkings`.
    static let ic_slider_img_parkings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_slider_img_parkings")
    /// Image `ic_star_pay_trip`.
    static let ic_star_pay_trip = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_star_pay_trip")
    /// Image `ic_succes`.
    static let ic_succes = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_succes")
    /// Image `ic_take_photo_my_shop`.
    static let ic_take_photo_my_shop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_take_photo_my_shop")
    /// Image `ic_take_photo`.
    static let ic_take_photo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_take_photo")
    /// Image `ic_takeaway_my_book_product`.
    static let ic_takeaway_my_book_product = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_takeaway_my_book_product")
    /// Image `ic_time_parkings`.
    static let ic_time_parkings = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_time_parkings")
    /// Image `ic_topup_money_transfer`.
    static let ic_topup_money_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_topup_money_transfer")
    /// Image `ic_topup_personal_info`.
    static let ic_topup_personal_info = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_topup_personal_info")
    /// Image `ic_transaction_in-1`.
    static let ic_transaction_in1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_transaction_in-1")
    /// Image `ic_transaction_out-1`.
    static let ic_transaction_out1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_transaction_out-1")
    /// Image `ic_transaction_person`.
    static let ic_transaction_person = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_transaction_person")
    /// Image `ic_transfer_money_transfer`.
    static let ic_transfer_money_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_transfer_money_transfer")
    /// Image `ic_under_construction_pay_via_cash`.
    static let ic_under_construction_pay_via_cash = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_under_construction_pay_via_cash")
    /// Image `ic_unknown_card_details`.
    static let ic_unknown_card_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unknown_card_details")
    /// Image `ic_unknown_card`.
    static let ic_unknown_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_unknown_card")
    /// Image `ic_upload_passport`.
    static let ic_upload_passport = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_upload_passport")
    /// Image `ic_upload_pay`.
    static let ic_upload_pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_upload_pay")
    /// Image `ic_upload_transfer`.
    static let ic_upload_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_upload_transfer")
    /// Image `ic_usa_flag_gift_purchase`.
    static let ic_usa_flag_gift_purchase = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_usa_flag_gift_purchase")
    /// Image `ic_vendex_pay_home`.
    static let ic_vendex_pay_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vendex_pay_home")
    /// Image `ic_vendex_qrcode`.
    static let ic_vendex_qrcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vendex_qrcode")
    /// Image `ic_viewAll_arrow_gray`.
    static let ic_viewAll_arrow_gray = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_viewAll_arrow_gray")
    /// Image `ic_viewAll_arrow_red`.
    static let ic_viewAll_arrow_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_viewAll_arrow_red")
    /// Image `ic_visa_card_details`.
    static let ic_visa_card_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_visa_card_details")
    /// Image `ic_visa_checkout`.
    static let ic_visa_checkout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_visa_checkout")
    /// Image `ic_visa_logo_card`.
    static let ic_visa_logo_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_visa_logo_card")
    /// Image `ic_visacard`.
    static let ic_visacard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_visacard")
    /// Image `ic_vodafone_checkout`.
    static let ic_vodafone_checkout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vodafone_checkout")
    /// Image `ic_vodafone_topup_estore`.
    static let ic_vodafone_topup_estore = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_vodafone_topup_estore")
    /// Image `ic_wallet_balance`.
    static let ic_wallet_balance = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wallet_balance")
    /// Image `ic_warning_transfer`.
    static let ic_warning_transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_warning_transfer")
    /// Image `ic_water_white_qatar_tabs`.
    static let ic_water_white_qatar_tabs = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_water_white_qatar_tabs")
    /// Image `ic_water_yellow_qatar_tabs`.
    static let ic_water_yellow_qatar_tabs = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_water_yellow_qatar_tabs")
    /// Image `ic_website_contact_us`.
    static let ic_website_contact_us = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_website_contact_us")
    /// Image `ic_world_map_my_card`.
    static let ic_world_map_my_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_world_map_my_card")
    /// Image `ic_wrong`.
    static let ic_wrong = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wrong")
    /// Image `id_container_my_library`.
    static let id_container_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "id_container_my_library")
    /// Image `img_fill_card`.
    static let img_fill_card = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_fill_card")
    /// Image `loading.gif`.
    static let loadingGif = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading.gif")
    /// Image `logo_awqaf`.
    static let logo_awqaf = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_awqaf")
    /// Image `logo_eid_charity`.
    static let logo_eid_charity = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_eid_charity")
    /// Image `logo_parkings`.
    static let logo_parkings = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_parkings")
    /// Image `logo_qatar_charity`.
    static let logo_qatar_charity = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_qatar_charity")
    /// Image `logo_qatar_cool`.
    static let logo_qatar_cool = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_qatar_cool")
    /// Image `logo_qatar_red`.
    static let logo_qatar_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_qatar_red")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `loyalty_card_container_my_library`.
    static let loyalty_card_container_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "loyalty_card_container_my_library")
    /// Image `map_uodate_address`.
    static let map_uodate_address = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_uodate_address")
    /// Image `passport_container_my_library`.
    static let passport_container_my_library = Rswift.ImageResource(bundle: R.hostingBundle, name: "passport_container_my_library")
    /// Image `photo_passport_details`.
    static let photo_passport_details = Rswift.ImageResource(bundle: R.hostingBundle, name: "photo_passport_details")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "amount_circle_awqaf", bundle: ..., traitCollection: ...)`
    static func amount_circle_awqaf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.amount_circle_awqaf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bank_container_my_library", bundle: ..., traitCollection: ...)`
    static func bank_container_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bank_container_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bbg_btn_my_shop_add_item", bundle: ..., traitCollection: ...)`
    static func bbg_btn_my_shop_add_item(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bbg_btn_my_shop_add_item, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_Information_analytics", bundle: ..., traitCollection: ...)`
    static func bg_Information_analytics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_Information_analytics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_about_app", bundle: ..., traitCollection: ...)`
    static func bg_about_app(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_about_app, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_add_bank", bundle: ..., traitCollection: ...)`
    static func bg_add_bank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_add_bank, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_add_kahramaa_bills", bundle: ..., traitCollection: ...)`
    static func bg_add_kahramaa_bills(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_add_kahramaa_bills, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_add_metro_card", bundle: ..., traitCollection: ...)`
    static func bg_add_metro_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_add_metro_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_add_phone_bills", bundle: ..., traitCollection: ...)`
    static func bg_add_phone_bills(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_add_phone_bills, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_analytics", bundle: ..., traitCollection: ...)`
    static func bg_analytics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_analytics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_analytics_blue", bundle: ..., traitCollection: ...)`
    static func bg_analytics_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_analytics_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_analytics_red", bundle: ..., traitCollection: ...)`
    static func bg_analytics_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_analytics_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_awqaf", bundle: ..., traitCollection: ...)`
    static func bg_awqaf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_awqaf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_beneficiaries", bundle: ..., traitCollection: ...)`
    static func bg_beneficiaries(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_beneficiaries, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_bottom_karwa", bundle: ..., traitCollection: ...)`
    static func bg_bottom_karwa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_bottom_karwa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_btn_login", bundle: ..., traitCollection: ...)`
    static func bg_btn_login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_btn_login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_btn_pay", bundle: ..., traitCollection: ...)`
    static func bg_btn_pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_btn_pay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_btn_qmobile", bundle: ..., traitCollection: ...)`
    static func bg_btn_qmobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_btn_qmobile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_btn_stocks", bundle: ..., traitCollection: ...)`
    static func bg_btn_stocks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_btn_stocks, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_button_parkings_payment", bundle: ..., traitCollection: ...)`
    static func bg_button_parkings_payment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_button_parkings_payment, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_card_details", bundle: ..., traitCollection: ...)`
    static func bg_card_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_card_details, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_charity_analytics", bundle: ..., traitCollection: ...)`
    static func bg_charity_analytics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_charity_analytics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_circle_payment_parkings", bundle: ..., traitCollection: ...)`
    static func bg_circle_payment_parkings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_circle_payment_parkings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_circle_ticket_parkings", bundle: ..., traitCollection: ...)`
    static func bg_circle_ticket_parkings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_circle_ticket_parkings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_circle_topup_estore", bundle: ..., traitCollection: ...)`
    static func bg_circle_topup_estore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_circle_topup_estore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_confirm_transfer", bundle: ..., traitCollection: ...)`
    static func bg_confirm_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_confirm_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_contacts_us", bundle: ..., traitCollection: ...)`
    static func bg_contacts_us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_contacts_us, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_create_invoice", bundle: ..., traitCollection: ...)`
    static func bg_create_invoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_create_invoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_create_invoice2", bundle: ..., traitCollection: ...)`
    static func bg_create_invoice2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_create_invoice2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_create_shop", bundle: ..., traitCollection: ...)`
    static func bg_create_shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_create_shop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_credit_card", bundle: ..., traitCollection: ...)`
    static func bg_credit_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_credit_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_donation_cart", bundle: ..., traitCollection: ...)`
    static func bg_donation_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_donation_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_drop_off_location", bundle: ..., traitCollection: ...)`
    static func bg_drop_off_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_drop_off_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_e-shops_analytics", bundle: ..., traitCollection: ...)`
    static func bg_eShops_analytics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_eShops_analytics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_edit_saved_topup", bundle: ..., traitCollection: ...)`
    static func bg_edit_saved_topup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_edit_saved_topup, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_eid_charity", bundle: ..., traitCollection: ...)`
    static func bg_eid_charity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_eid_charity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_error_message", bundle: ..., traitCollection: ...)`
    static func bg_error_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_error_message, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_gift_cards", bundle: ..., traitCollection: ...)`
    static func bg_gift_cards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_gift_cards, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_home_bar_bottom", bundle: ..., traitCollection: ...)`
    static func bg_home_bar_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_home_bar_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_ice_cream_my_book", bundle: ..., traitCollection: ...)`
    static func bg_ice_cream_my_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_ice_cream_my_book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_invoice_view", bundle: ..., traitCollection: ...)`
    static func bg_invoice_view(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_invoice_view, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_invoices", bundle: ..., traitCollection: ...)`
    static func bg_invoices(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_invoices, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_kahramaa_bills", bundle: ..., traitCollection: ...)`
    static func bg_kahramaa_bills(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_kahramaa_bills, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_karwa", bundle: ..., traitCollection: ...)`
    static func bg_karwa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_karwa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_karwa_card_details", bundle: ..., traitCollection: ...)`
    static func bg_karwa_card_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_karwa_card_details, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_left_circle", bundle: ..., traitCollection: ...)`
    static func bg_left_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_left_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_login", bundle: ..., traitCollection: ...)`
    static func bg_login(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_login, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_lunch_screen", bundle: ..., traitCollection: ...)`
    static func bg_lunch_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_lunch_screen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_metro_rail", bundle: ..., traitCollection: ...)`
    static func bg_metro_rail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_metro_rail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_middle_circle", bundle: ..., traitCollection: ...)`
    static func bg_middle_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_middle_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_money_transfer", bundle: ..., traitCollection: ...)`
    static func bg_money_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_money_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_my_book", bundle: ..., traitCollection: ...)`
    static func bg_my_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_my_book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_my_book_product", bundle: ..., traitCollection: ...)`
    static func bg_my_book_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_my_book_product, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_my_card", bundle: ..., traitCollection: ...)`
    static func bg_my_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_my_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_my_orders", bundle: ..., traitCollection: ...)`
    static func bg_my_orders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_my_orders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_my_shop", bundle: ..., traitCollection: ...)`
    static func bg_my_shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_my_shop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_my_shop_add_item", bundle: ..., traitCollection: ...)`
    static func bg_my_shop_add_item(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_my_shop_add_item, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_my_shops", bundle: ..., traitCollection: ...)`
    static func bg_my_shops(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_my_shops, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_ooredoo_phone", bundle: ..., traitCollection: ...)`
    static func bg_ooredoo_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_ooredoo_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_order_details", bundle: ..., traitCollection: ...)`
    static func bg_order_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_order_details, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_parkings", bundle: ..., traitCollection: ...)`
    static func bg_parkings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_parkings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_passport", bundle: ..., traitCollection: ...)`
    static func bg_passport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_passport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_passport_details", bundle: ..., traitCollection: ...)`
    static func bg_passport_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_passport_details, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_pay_and_go", bundle: ..., traitCollection: ...)`
    static func bg_pay_and_go(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_pay_and_go, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_pay_on_go_phone", bundle: ..., traitCollection: ...)`
    static func bg_pay_on_go_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_pay_on_go_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_pay_on_the_go_qatar_cool", bundle: ..., traitCollection: ...)`
    static func bg_pay_on_the_go_qatar_cool(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_pay_on_the_go_qatar_cool, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_pay_trip", bundle: ..., traitCollection: ...)`
    static func bg_pay_trip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_pay_trip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_pay_via_cash", bundle: ..., traitCollection: ...)`
    static func bg_pay_via_cash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_pay_via_cash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_payment_method", bundle: ..., traitCollection: ...)`
    static func bg_payment_method(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_payment_method, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_payment_parkings", bundle: ..., traitCollection: ...)`
    static func bg_payment_parkings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_payment_parkings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_payment_request_top", bundle: ..., traitCollection: ...)`
    static func bg_payment_request_top(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_payment_request_top, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_pearl_services", bundle: ..., traitCollection: ...)`
    static func bg_pearl_services(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_pearl_services, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_phone_bills", bundle: ..., traitCollection: ...)`
    static func bg_phone_bills(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_phone_bills, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_preview_invoice", bundle: ..., traitCollection: ...)`
    static func bg_preview_invoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_preview_invoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_public_products", bundle: ..., traitCollection: ...)`
    static func bg_public_products(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_public_products, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_qatar", bundle: ..., traitCollection: ...)`
    static func bg_qatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_qatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_qatar_charity", bundle: ..., traitCollection: ...)`
    static func bg_qatar_charity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_qatar_charity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_qatar_cool", bundle: ..., traitCollection: ...)`
    static func bg_qatar_cool(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_qatar_cool, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_qatar_red", bundle: ..., traitCollection: ...)`
    static func bg_qatar_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_qatar_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_qmobile", bundle: ..., traitCollection: ...)`
    static func bg_qmobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_qmobile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_qr_code", bundle: ..., traitCollection: ...)`
    static func bg_qr_code(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_qr_code, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_refill_wallet", bundle: ..., traitCollection: ...)`
    static func bg_refill_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_refill_wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_right_circle", bundle: ..., traitCollection: ...)`
    static func bg_right_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_right_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_select_account", bundle: ..., traitCollection: ...)`
    static func bg_select_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_select_account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_settings", bundle: ..., traitCollection: ...)`
    static func bg_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_shop_profile", bundle: ..., traitCollection: ...)`
    static func bg_shop_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_shop_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_square_upload_passport", bundle: ..., traitCollection: ...)`
    static func bg_square_upload_passport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_square_upload_passport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_stocks", bundle: ..., traitCollection: ...)`
    static func bg_stocks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_stocks, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_stocks_curve", bundle: ..., traitCollection: ...)`
    static func bg_stocks_curve(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_stocks_curve, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_success_message", bundle: ..., traitCollection: ...)`
    static func bg_success_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_success_message, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_top_home", bundle: ..., traitCollection: ...)`
    static func bg_top_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_top_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_transactions", bundle: ..., traitCollection: ...)`
    static func bg_transactions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_transactions, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_transports_analytics", bundle: ..., traitCollection: ...)`
    static func bg_transports_analytics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_transports_analytics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_utilites_analytics", bundle: ..., traitCollection: ...)`
    static func bg_utilites_analytics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_utilites_analytics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_view_qid", bundle: ..., traitCollection: ...)`
    static func bg_view_qid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_view_qid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_vodafone_phone", bundle: ..., traitCollection: ...)`
    static func bg_vodafone_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_vodafone_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "credit_card_container_my_library", bundle: ..., traitCollection: ...)`
    static func credit_card_container_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.credit_card_container_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "debit_card_container_my_library", bundle: ..., traitCollection: ...)`
    static func debit_card_container_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.debit_card_container_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "documents_container_my_library", bundle: ..., traitCollection: ...)`
    static func documents_container_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.documents_container_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "driving_container_my_library", bundle: ..., traitCollection: ...)`
    static func driving_container_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.driving_container_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic transfer_home", bundle: ..., traitCollection: ...)`
    static func icTransfer_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icTransfer_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_kahramaa", bundle: ..., traitCollection: ...)`
    static func ic_add_kahramaa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_kahramaa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_my_shops", bundle: ..., traitCollection: ...)`
    static func ic_add_my_shops(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_my_shops, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_number_phone", bundle: ..., traitCollection: ...)`
    static func ic_add_number_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_number_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add_qatar_cool", bundle: ..., traitCollection: ...)`
    static func ic_add_qatar_cool(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add_qatar_cool, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_adv_banner_my_book", bundle: ..., traitCollection: ...)`
    static func ic_adv_banner_my_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_adv_banner_my_book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_adv_banner_topup_estore", bundle: ..., traitCollection: ...)`
    static func ic_adv_banner_topup_estore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_adv_banner_topup_estore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_american_express_checkout", bundle: ..., traitCollection: ...)`
    static func ic_american_express_checkout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_american_express_checkout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_awqaf", bundle: ..., traitCollection: ...)`
    static func ic_arrow_awqaf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_awqaf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_down_gray", bundle: ..., traitCollection: ...)`
    static func ic_arrow_down_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_down_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_down_my_book_product", bundle: ..., traitCollection: ...)`
    static func ic_arrow_down_my_book_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_down_my_book_product, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_down_transfer", bundle: ..., traitCollection: ...)`
    static func ic_arrow_down_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_down_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_eid", bundle: ..., traitCollection: ...)`
    static func ic_arrow_eid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_eid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_fill_down_transfer", bundle: ..., traitCollection: ...)`
    static func ic_arrow_fill_down_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_fill_down_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_money_transfer", bundle: ..., traitCollection: ...)`
    static func ic_arrow_money_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_money_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_qatar_charity", bundle: ..., traitCollection: ...)`
    static func ic_arrow_qatar_charity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_qatar_charity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_qatar_red", bundle: ..., traitCollection: ...)`
    static func ic_arrow_qatar_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_qatar_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_request_car", bundle: ..., traitCollection: ...)`
    static func ic_arrow_request_car(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_request_car, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_right_kahramaa", bundle: ..., traitCollection: ...)`
    static func ic_arrow_right_kahramaa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_right_kahramaa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_right_transfer", bundle: ..., traitCollection: ...)`
    static func ic_arrow_right_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_right_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_settings", bundle: ..., traitCollection: ...)`
    static func ic_arrow_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_arrow_up_my_book_product", bundle: ..., traitCollection: ...)`
    static func ic_arrow_up_my_book_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_arrow_up_my_book_product, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_avatar", bundle: ..., traitCollection: ...)`
    static func ic_avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_avatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_avatar_photo", bundle: ..., traitCollection: ...)`
    static func ic_avatar_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_avatar_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back", bundle: ..., traitCollection: ...)`
    static func ic_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_back_black", bundle: ..., traitCollection: ...)`
    static func ic_back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_back_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bank", bundle: ..., traitCollection: ...)`
    static func ic_bank(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bank, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bank_account_library", bundle: ..., traitCollection: ...)`
    static func ic_bank_account_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bank_account_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bank_add_card", bundle: ..., traitCollection: ...)`
    static func ic_bank_add_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bank_add_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bank_add_card_white", bundle: ..., traitCollection: ...)`
    static func ic_bank_add_card_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bank_add_card_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bank_tab_my_library", bundle: ..., traitCollection: ...)`
    static func ic_bank_tab_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bank_tab_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_banner_shop_profile", bundle: ..., traitCollection: ...)`
    static func ic_banner_shop_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_banner_shop_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_beneficiaries_money_transfer", bundle: ..., traitCollection: ...)`
    static func ic_beneficiaries_money_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_beneficiaries_money_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_beneficiaries_transfer", bundle: ..., traitCollection: ...)`
    static func ic_beneficiaries_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_beneficiaries_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bill", bundle: ..., traitCollection: ...)`
    static func ic_bill(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bill, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_black_card_home", bundle: ..., traitCollection: ...)`
    static func ic_black_card_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_black_card_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_black_clock_my_library", bundle: ..., traitCollection: ...)`
    static func ic_black_clock_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_black_clock_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_blue_card_home", bundle: ..., traitCollection: ...)`
    static func ic_blue_card_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_blue_card_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_calender", bundle: ..., traitCollection: ...)`
    static func ic_calender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calender, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_calender_qmobile", bundle: ..., traitCollection: ...)`
    static func ic_calender_qmobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calender_qmobile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_call_limousine", bundle: ..., traitCollection: ...)`
    static func ic_call_limousine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_call_limousine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_camera_back_uploadQID", bundle: ..., traitCollection: ...)`
    static func ic_camera_back_uploadQID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera_back_uploadQID, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_camera_front_uploadQID", bundle: ..., traitCollection: ...)`
    static func ic_camera_front_uploadQID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera_front_uploadQID, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_camera_shop_profile", bundle: ..., traitCollection: ...)`
    static func ic_camera_shop_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera_shop_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_camera_upload_passport", bundle: ..., traitCollection: ...)`
    static func ic_camera_upload_passport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_camera_upload_passport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_car_request_car", bundle: ..., traitCollection: ...)`
    static func ic_car_request_car(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_car_request_car, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_card", bundle: ..., traitCollection: ...)`
    static func ic_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_card_karwa", bundle: ..., traitCollection: ...)`
    static func ic_card_karwa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_card_karwa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_card_metro", bundle: ..., traitCollection: ...)`
    static func ic_card_metro(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_card_metro, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_card_my_card", bundle: ..., traitCollection: ...)`
    static func ic_card_my_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_card_my_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_card_uploadQID", bundle: ..., traitCollection: ...)`
    static func ic_card_uploadQID(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_card_uploadQID, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cards_tab_my_library", bundle: ..., traitCollection: ...)`
    static func ic_cards_tab_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cards_tab_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cart_donation_cart", bundle: ..., traitCollection: ...)`
    static func ic_cart_donation_cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart_donation_cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cart_eid", bundle: ..., traitCollection: ...)`
    static func ic_cart_eid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart_eid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cart_qatar_charity", bundle: ..., traitCollection: ...)`
    static func ic_cart_qatar_charity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart_qatar_charity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cart_qatar_red", bundle: ..., traitCollection: ...)`
    static func ic_cart_qatar_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart_qatar_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cart_transactions", bundle: ..., traitCollection: ...)`
    static func ic_cart_transactions(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cart_transactions, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_cash_request_car", bundle: ..., traitCollection: ...)`
    static func ic_cash_request_car(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_cash_request_car, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check_success_message", bundle: ..., traitCollection: ...)`
    static func ic_check_success_message(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check_success_message, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chip_add_card", bundle: ..., traitCollection: ...)`
    static func ic_chip_add_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chip_add_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_chip_card", bundle: ..., traitCollection: ...)`
    static func ic_chip_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_chip_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_clock_passport_details", bundle: ..., traitCollection: ...)`
    static func ic_clock_passport_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_clock_passport_details, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close_reset_pin", bundle: ..., traitCollection: ...)`
    static func ic_close_reset_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close_reset_pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_coins_parkings", bundle: ..., traitCollection: ...)`
    static func ic_coins_parkings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_coins_parkings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_contact_home", bundle: ..., traitCollection: ...)`
    static func ic_contact_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_contact_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_contact_us_settings", bundle: ..., traitCollection: ...)`
    static func ic_contact_us_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_contact_us_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_create_account_check", bundle: ..., traitCollection: ...)`
    static func ic_create_account_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_create_account_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_create_account_house", bundle: ..., traitCollection: ...)`
    static func ic_create_account_house(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_create_account_house, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_create_account_mobile", bundle: ..., traitCollection: ...)`
    static func ic_create_account_mobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_create_account_mobile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_create_group", bundle: ..., traitCollection: ...)`
    static func ic_create_group(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_create_group, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_create_group_phone_bills", bundle: ..., traitCollection: ...)`
    static func ic_create_group_phone_bills(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_create_group_phone_bills, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_create_group_qatar_cool", bundle: ..., traitCollection: ...)`
    static func ic_create_group_qatar_cool(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_create_group_qatar_cool, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_credit_card", bundle: ..., traitCollection: ...)`
    static func ic_credit_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_credit_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_credit_card_payment_method", bundle: ..., traitCollection: ...)`
    static func ic_credit_card_payment_method(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_credit_card_payment_method, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_credit_card_white", bundle: ..., traitCollection: ...)`
    static func ic_credit_card_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_credit_card_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_debit_card", bundle: ..., traitCollection: ...)`
    static func ic_debit_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_debit_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_debit_card_payAndGo", bundle: ..., traitCollection: ...)`
    static func ic_debit_card_payAndGo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_debit_card_payAndGo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_debit_card_white", bundle: ..., traitCollection: ...)`
    static func ic_debit_card_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_debit_card_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_delete_invoice", bundle: ..., traitCollection: ...)`
    static func ic_delete_invoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_invoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_delete_item", bundle: ..., traitCollection: ...)`
    static func ic_delete_item(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_item, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_documents_library", bundle: ..., traitCollection: ...)`
    static func ic_documents_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_documents_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_documents_tab_my_library", bundle: ..., traitCollection: ...)`
    static func ic_documents_tab_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_documents_tab_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_edit", bundle: ..., traitCollection: ...)`
    static func ic_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_edit_invoice", bundle: ..., traitCollection: ...)`
    static func ic_edit_invoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit_invoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_edit_my_shops", bundle: ..., traitCollection: ...)`
    static func ic_edit_my_shops(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit_my_shops, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_edit_qmobile", bundle: ..., traitCollection: ...)`
    static func ic_edit_qmobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit_qmobile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_ellipses", bundle: ..., traitCollection: ...)`
    static func ic_ellipses(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ellipses, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_ellipses_black", bundle: ..., traitCollection: ...)`
    static func ic_ellipses_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ellipses_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_email", bundle: ..., traitCollection: ...)`
    static func ic_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_email_contact_us", bundle: ..., traitCollection: ...)`
    static func ic_email_contact_us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email_contact_us, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_email_red_send_invoice", bundle: ..., traitCollection: ...)`
    static func ic_email_red_send_invoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email_red_send_invoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_email_transfer", bundle: ..., traitCollection: ...)`
    static func ic_email_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_email_white_send_invoice", bundle: ..., traitCollection: ...)`
    static func ic_email_white_send_invoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email_white_send_invoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_emptyTransaction_home", bundle: ..., traitCollection: ...)`
    static func ic_emptyTransaction_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_emptyTransaction_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_empty_limousine", bundle: ..., traitCollection: ...)`
    static func ic_empty_limousine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_empty_limousine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_empty_my_library", bundle: ..., traitCollection: ...)`
    static func ic_empty_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_empty_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_empty_numbers_kahramaa", bundle: ..., traitCollection: ...)`
    static func ic_empty_numbers_kahramaa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_empty_numbers_kahramaa, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_empty_orders", bundle: ..., traitCollection: ...)`
    static func ic_empty_orders(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_empty_orders, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_empty_products", bundle: ..., traitCollection: ...)`
    static func ic_empty_products(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_empty_products, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_empty_shop", bundle: ..., traitCollection: ...)`
    static func ic_empty_shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_empty_shop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_empty_tab_my_library", bundle: ..., traitCollection: ...)`
    static func ic_empty_tab_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_empty_tab_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_enter_pin", bundle: ..., traitCollection: ...)`
    static func ic_enter_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_enter_pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_error_circle", bundle: ..., traitCollection: ...)`
    static func ic_error_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_error_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_error_circle_invoices", bundle: ..., traitCollection: ...)`
    static func ic_error_circle_invoices(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_error_circle_invoices, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_favourites_my_book", bundle: ..., traitCollection: ...)`
    static func ic_favourites_my_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_favourites_my_book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_filter_invoices", bundle: ..., traitCollection: ...)`
    static func ic_filter_invoices(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_filter_invoices, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_finger_print", bundle: ..., traitCollection: ...)`
    static func ic_finger_print(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_finger_print, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_food_my_book", bundle: ..., traitCollection: ...)`
    static func ic_food_my_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_food_my_book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_food_white_qatar_tabs", bundle: ..., traitCollection: ...)`
    static func ic_food_white_qatar_tabs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_food_white_qatar_tabs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_food_yellow_qatar_tabs", bundle: ..., traitCollection: ...)`
    static func ic_food_yellow_qatar_tabs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_food_yellow_qatar_tabs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_gallery", bundle: ..., traitCollection: ...)`
    static func ic_gallery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_gallery, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_gallery_upload_passport", bundle: ..., traitCollection: ...)`
    static func ic_gallery_upload_passport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_gallery_upload_passport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_game_img_gift_cards", bundle: ..., traitCollection: ...)`
    static func ic_game_img_gift_cards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_game_img_gift_cards, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_gear", bundle: ..., traitCollection: ...)`
    static func ic_gear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_gear, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_go_create_group", bundle: ..., traitCollection: ...)`
    static func ic_go_create_group(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_go_create_group, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_halal_my_book_product", bundle: ..., traitCollection: ...)`
    static func ic_halal_my_book_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_halal_my_book_product, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_health_white_qatar_tabs", bundle: ..., traitCollection: ...)`
    static func ic_health_white_qatar_tabs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_health_white_qatar_tabs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_health_yellow_qatar_tabs", bundle: ..., traitCollection: ...)`
    static func ic_health_yellow_qatar_tabs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_health_yellow_qatar_tabs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home_my_book", bundle: ..., traitCollection: ...)`
    static func ic_home_my_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_my_book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_ice_cream_my_book", bundle: ..., traitCollection: ...)`
    static func ic_ice_cream_my_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ice_cream_my_book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_id_card_library", bundle: ..., traitCollection: ...)`
    static func ic_id_card_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_id_card_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_id_license_tab_my_library", bundle: ..., traitCollection: ...)`
    static func ic_id_license_tab_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_id_license_tab_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_indoor_my_book_product", bundle: ..., traitCollection: ...)`
    static func ic_indoor_my_book_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_indoor_my_book_product, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_information_seperator_analytics", bundle: ..., traitCollection: ...)`
    static func ic_information_seperator_analytics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_information_seperator_analytics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_international_photo_topup_estore", bundle: ..., traitCollection: ...)`
    static func ic_international_photo_topup_estore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_international_photo_topup_estore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_international_topup_estore", bundle: ..., traitCollection: ...)`
    static func ic_international_topup_estore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_international_topup_estore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_invite_settings", bundle: ..., traitCollection: ...)`
    static func ic_invite_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_invite_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_invoice_analytics", bundle: ..., traitCollection: ...)`
    static func ic_invoice_analytics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_invoice_analytics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_invoice_my_shop", bundle: ..., traitCollection: ...)`
    static func ic_invoice_my_shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_invoice_my_shop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_invoices_my_shops", bundle: ..., traitCollection: ...)`
    static func ic_invoices_my_shops(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_invoices_my_shops, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_itunes_img_gift_cards", bundle: ..., traitCollection: ...)`
    static func ic_itunes_img_gift_cards(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_itunes_img_gift_cards, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_karwa_smart_card", bundle: ..., traitCollection: ...)`
    static func ic_karwa_smart_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_karwa_smart_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_license_library", bundle: ..., traitCollection: ...)`
    static func ic_license_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_license_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_line_drop_off_location", bundle: ..., traitCollection: ...)`
    static func ic_line_drop_off_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_line_drop_off_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_link_red_send_invoice", bundle: ..., traitCollection: ...)`
    static func ic_link_red_send_invoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_link_red_send_invoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_link_white_send_invoice", bundle: ..., traitCollection: ...)`
    static func ic_link_white_send_invoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_link_white_send_invoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_list_karwa_taxi", bundle: ..., traitCollection: ...)`
    static func ic_list_karwa_taxi(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_list_karwa_taxi, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_local_white_qatar_tabs", bundle: ..., traitCollection: ...)`
    static func ic_local_white_qatar_tabs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_local_white_qatar_tabs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_local_yellow_qatar_tabs", bundle: ..., traitCollection: ...)`
    static func ic_local_yellow_qatar_tabs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_local_yellow_qatar_tabs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_location_drop_off_location", bundle: ..., traitCollection: ...)`
    static func ic_location_drop_off_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_location_drop_off_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_lock_reset_pin", bundle: ..., traitCollection: ...)`
    static func ic_lock_reset_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_lock_reset_pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_lock_settings", bundle: ..., traitCollection: ...)`
    static func ic_lock_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_lock_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_logo_checkout", bundle: ..., traitCollection: ...)`
    static func ic_logo_checkout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo_checkout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_logo_my_book", bundle: ..., traitCollection: ...)`
    static func ic_logo_my_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo_my_book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_logo_shop_profile", bundle: ..., traitCollection: ...)`
    static func ic_logo_shop_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo_shop_profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_logout_home", bundle: ..., traitCollection: ...)`
    static func ic_logout_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logout_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_logout_settings", bundle: ..., traitCollection: ...)`
    static func ic_logout_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logout_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_loyalty_card_library", bundle: ..., traitCollection: ...)`
    static func ic_loyalty_card_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_loyalty_card_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_map_contacts_us", bundle: ..., traitCollection: ...)`
    static func ic_map_contacts_us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_map_contacts_us, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_map_drop_off_location", bundle: ..., traitCollection: ...)`
    static func ic_map_drop_off_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_map_drop_off_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_maroon_card_home", bundle: ..., traitCollection: ...)`
    static func ic_maroon_card_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_maroon_card_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mastercard", bundle: ..., traitCollection: ...)`
    static func ic_mastercard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mastercard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mastercard_card_details", bundle: ..., traitCollection: ...)`
    static func ic_mastercard_card_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mastercard_card_details, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mastercard_logo_card", bundle: ..., traitCollection: ...)`
    static func ic_mastercard_logo_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mastercard_logo_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mastercard_my_library", bundle: ..., traitCollection: ...)`
    static func ic_mastercard_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mastercard_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_menu_drop_off_location", bundle: ..., traitCollection: ...)`
    static func ic_menu_drop_off_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_menu_drop_off_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_metro_rail_card", bundle: ..., traitCollection: ...)`
    static func ic_metro_rail_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_metro_rail_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_minus_invoice", bundle: ..., traitCollection: ...)`
    static func ic_minus_invoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_minus_invoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mobile_contact_us", bundle: ..., traitCollection: ...)`
    static func ic_mobile_contact_us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mobile_contact_us, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mobile_qid", bundle: ..., traitCollection: ...)`
    static func ic_mobile_qid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mobile_qid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mobile_transfer", bundle: ..., traitCollection: ...)`
    static func ic_mobile_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mobile_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_money_invoices", bundle: ..., traitCollection: ...)`
    static func ic_money_invoices(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_money_invoices, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_money_parkings", bundle: ..., traitCollection: ...)`
    static func ic_money_parkings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_money_parkings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_my_library_home", bundle: ..., traitCollection: ...)`
    static func ic_my_library_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_library_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_my_shop", bundle: ..., traitCollection: ...)`
    static func ic_my_shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_shop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_my_wallet_home", bundle: ..., traitCollection: ...)`
    static func ic_my_wallet_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_my_wallet_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_naps_checkout", bundle: ..., traitCollection: ...)`
    static func ic_naps_checkout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_naps_checkout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_noqs_home", bundle: ..., traitCollection: ...)`
    static func ic_noqs_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_noqs_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_notifications_my_book", bundle: ..., traitCollection: ...)`
    static func ic_notifications_my_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notifications_my_book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_ooredoo_checkout", bundle: ..., traitCollection: ...)`
    static func ic_ooredoo_checkout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ooredoo_checkout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_ooredoo_money_checkout", bundle: ..., traitCollection: ...)`
    static func ic_ooredoo_money_checkout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ooredoo_money_checkout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_ooredoo_money_payment_method", bundle: ..., traitCollection: ...)`
    static func ic_ooredoo_money_payment_method(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ooredoo_money_payment_method, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_ooredoo_payment_method", bundle: ..., traitCollection: ...)`
    static func ic_ooredoo_payment_method(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ooredoo_payment_method, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_ooredoo_topup_estore", bundle: ..., traitCollection: ...)`
    static func ic_ooredoo_topup_estore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ooredoo_topup_estore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_or_pay", bundle: ..., traitCollection: ...)`
    static func ic_or_pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_or_pay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_or_refill_karwa_card", bundle: ..., traitCollection: ...)`
    static func ic_or_refill_karwa_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_or_refill_karwa_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_other_services_parkings", bundle: ..., traitCollection: ...)`
    static func ic_other_services_parkings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_other_services_parkings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_outlet_my_book", bundle: ..., traitCollection: ...)`
    static func ic_outlet_my_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_outlet_my_book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_parking_my_book_product", bundle: ..., traitCollection: ...)`
    static func ic_parking_my_book_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_parking_my_book_product, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_passenger_request_car", bundle: ..., traitCollection: ...)`
    static func ic_passenger_request_car(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_passenger_request_car, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_passport", bundle: ..., traitCollection: ...)`
    static func ic_passport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_passport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_passport_library", bundle: ..., traitCollection: ...)`
    static func ic_passport_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_passport_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_passport_tab_my_library", bundle: ..., traitCollection: ...)`
    static func ic_passport_tab_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_passport_tab_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_password", bundle: ..., traitCollection: ...)`
    static func ic_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pay_money_transfer", bundle: ..., traitCollection: ...)`
    static func ic_pay_money_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pay_money_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pay_on_the_go", bundle: ..., traitCollection: ...)`
    static func ic_pay_on_the_go(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pay_on_the_go, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pay_your_parking", bundle: ..., traitCollection: ...)`
    static func ic_pay_your_parking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pay_your_parking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_paypal_checkout", bundle: ..., traitCollection: ...)`
    static func ic_paypal_checkout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_paypal_checkout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_paypal_payment_method", bundle: ..., traitCollection: ...)`
    static func ic_paypal_payment_method(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_paypal_payment_method, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_person", bundle: ..., traitCollection: ...)`
    static func ic_person(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_person, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_person_settings", bundle: ..., traitCollection: ...)`
    static func ic_person_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_person_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_phonebook", bundle: ..., traitCollection: ...)`
    static func ic_phonebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_phonebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plus_invoice", bundle: ..., traitCollection: ...)`
    static func ic_plus_invoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus_invoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plus_my_library", bundle: ..., traitCollection: ...)`
    static func ic_plus_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plus_my_shop", bundle: ..., traitCollection: ...)`
    static func ic_plus_my_shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus_my_shop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plus_phone_bills", bundle: ..., traitCollection: ...)`
    static func ic_plus_phone_bills(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus_phone_bills, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_plus_stocks", bundle: ..., traitCollection: ...)`
    static func ic_plus_stocks(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_plus_stocks, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_profile_my_book", bundle: ..., traitCollection: ...)`
    static func ic_profile_my_book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_profile_my_book, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_promo_request_car", bundle: ..., traitCollection: ...)`
    static func ic_promo_request_car(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_promo_request_car, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_promotions_parkings", bundle: ..., traitCollection: ...)`
    static func ic_promotions_parkings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_promotions_parkings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_qatar_flag_gift_purchase", bundle: ..., traitCollection: ...)`
    static func ic_qatar_flag_gift_purchase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_qatar_flag_gift_purchase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_qatar_flag_transfer", bundle: ..., traitCollection: ...)`
    static func ic_qatar_flag_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_qatar_flag_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_qatar_pay_checkout", bundle: ..., traitCollection: ...)`
    static func ic_qatar_pay_checkout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_qatar_pay_checkout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_qid", bundle: ..., traitCollection: ...)`
    static func ic_qid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_qid, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_qpan_transfer", bundle: ..., traitCollection: ...)`
    static func ic_qpan_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_qpan_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_qr_code_home", bundle: ..., traitCollection: ...)`
    static func ic_qr_code_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_qr_code_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_qr_code_settings", bundle: ..., traitCollection: ...)`
    static func ic_qr_code_settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_qr_code_settings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_qrcode_shape", bundle: ..., traitCollection: ...)`
    static func ic_qrcode_shape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_qrcode_shape, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_qrcode_transfer", bundle: ..., traitCollection: ...)`
    static func ic_qrcode_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_qrcode_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_red_clock_my_library", bundle: ..., traitCollection: ...)`
    static func ic_red_clock_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_red_clock_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_red_trash_my_products", bundle: ..., traitCollection: ...)`
    static func ic_red_trash_my_products(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_red_trash_my_products, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_redeem_code_parkings", bundle: ..., traitCollection: ...)`
    static func ic_redeem_code_parkings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_redeem_code_parkings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_request_money_transfer", bundle: ..., traitCollection: ...)`
    static func ic_request_money_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_request_money_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_safe_area", bundle: ..., traitCollection: ...)`
    static func ic_safe_area(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_safe_area, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sand_clock_invoices", bundle: ..., traitCollection: ...)`
    static func ic_sand_clock_invoices(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sand_clock_invoices, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_scanQR", bundle: ..., traitCollection: ...)`
    static func ic_scanQR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_scanQR, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_scanQR_pay", bundle: ..., traitCollection: ...)`
    static func ic_scanQR_pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_scanQR_pay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_scan_barcode_parkings", bundle: ..., traitCollection: ...)`
    static func ic_scan_barcode_parkings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_scan_barcode_parkings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_scan_card", bundle: ..., traitCollection: ...)`
    static func ic_scan_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_scan_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_scan_my_card", bundle: ..., traitCollection: ...)`
    static func ic_scan_my_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_scan_my_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_scan_qpan_add_beneficiaries", bundle: ..., traitCollection: ...)`
    static func ic_scan_qpan_add_beneficiaries(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_scan_qpan_add_beneficiaries, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_scan_qr_code", bundle: ..., traitCollection: ...)`
    static func ic_scan_qr_code(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_scan_qr_code, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_scan_qr_parkings", bundle: ..., traitCollection: ...)`
    static func ic_scan_qr_parkings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_scan_qr_parkings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_scan_to_pay", bundle: ..., traitCollection: ...)`
    static func ic_scan_to_pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_scan_to_pay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_scan_transfer", bundle: ..., traitCollection: ...)`
    static func ic_scan_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_scan_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_schedule_request_car", bundle: ..., traitCollection: ...)`
    static func ic_schedule_request_car(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_schedule_request_car, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_search_my_shops", bundle: ..., traitCollection: ...)`
    static func ic_search_my_shops(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_search_my_shops, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_seperator_limousine", bundle: ..., traitCollection: ...)`
    static func ic_seperator_limousine(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_seperator_limousine, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_share", bundle: ..., traitCollection: ...)`
    static func ic_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_share_my_book_product", bundle: ..., traitCollection: ...)`
    static func ic_share_my_book_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_my_book_product, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_share_my_shops", bundle: ..., traitCollection: ...)`
    static func ic_share_my_shops(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_share_my_shops, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_shelter_white_qatar_tabs", bundle: ..., traitCollection: ...)`
    static func ic_shelter_white_qatar_tabs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_shelter_white_qatar_tabs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_shelter_yellow_qatar_tabs", bundle: ..., traitCollection: ...)`
    static func ic_shelter_yellow_qatar_tabs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_shelter_yellow_qatar_tabs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_shop_analytics", bundle: ..., traitCollection: ...)`
    static func ic_shop_analytics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_shop_analytics, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_shop_home", bundle: ..., traitCollection: ...)`
    static func ic_shop_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_shop_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_show_password", bundle: ..., traitCollection: ...)`
    static func ic_show_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_show_password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_signature", bundle: ..., traitCollection: ...)`
    static func ic_signature(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_signature, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_signature_pen", bundle: ..., traitCollection: ...)`
    static func ic_signature_pen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_signature_pen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_slider_img_parkings", bundle: ..., traitCollection: ...)`
    static func ic_slider_img_parkings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_slider_img_parkings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_star_pay_trip", bundle: ..., traitCollection: ...)`
    static func ic_star_pay_trip(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_star_pay_trip, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_succes", bundle: ..., traitCollection: ...)`
    static func ic_succes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_succes, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_take_photo", bundle: ..., traitCollection: ...)`
    static func ic_take_photo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_take_photo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_take_photo_my_shop", bundle: ..., traitCollection: ...)`
    static func ic_take_photo_my_shop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_take_photo_my_shop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_takeaway_my_book_product", bundle: ..., traitCollection: ...)`
    static func ic_takeaway_my_book_product(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_takeaway_my_book_product, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_time_parkings", bundle: ..., traitCollection: ...)`
    static func ic_time_parkings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_time_parkings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_topup_money_transfer", bundle: ..., traitCollection: ...)`
    static func ic_topup_money_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_topup_money_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_topup_personal_info", bundle: ..., traitCollection: ...)`
    static func ic_topup_personal_info(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_topup_personal_info, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_transaction_in-1", bundle: ..., traitCollection: ...)`
    static func ic_transaction_in1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_transaction_in1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_transaction_out-1", bundle: ..., traitCollection: ...)`
    static func ic_transaction_out1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_transaction_out1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_transaction_person", bundle: ..., traitCollection: ...)`
    static func ic_transaction_person(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_transaction_person, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_transfer_money_transfer", bundle: ..., traitCollection: ...)`
    static func ic_transfer_money_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_transfer_money_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_under_construction_pay_via_cash", bundle: ..., traitCollection: ...)`
    static func ic_under_construction_pay_via_cash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_under_construction_pay_via_cash, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_unknown_card", bundle: ..., traitCollection: ...)`
    static func ic_unknown_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unknown_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_unknown_card_details", bundle: ..., traitCollection: ...)`
    static func ic_unknown_card_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_unknown_card_details, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_upload_passport", bundle: ..., traitCollection: ...)`
    static func ic_upload_passport(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_upload_passport, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_upload_pay", bundle: ..., traitCollection: ...)`
    static func ic_upload_pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_upload_pay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_upload_transfer", bundle: ..., traitCollection: ...)`
    static func ic_upload_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_upload_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_usa_flag_gift_purchase", bundle: ..., traitCollection: ...)`
    static func ic_usa_flag_gift_purchase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_usa_flag_gift_purchase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_vendex_pay_home", bundle: ..., traitCollection: ...)`
    static func ic_vendex_pay_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vendex_pay_home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_vendex_qrcode", bundle: ..., traitCollection: ...)`
    static func ic_vendex_qrcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vendex_qrcode, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_viewAll_arrow_gray", bundle: ..., traitCollection: ...)`
    static func ic_viewAll_arrow_gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_viewAll_arrow_gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_viewAll_arrow_red", bundle: ..., traitCollection: ...)`
    static func ic_viewAll_arrow_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_viewAll_arrow_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_visa_card_details", bundle: ..., traitCollection: ...)`
    static func ic_visa_card_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_visa_card_details, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_visa_checkout", bundle: ..., traitCollection: ...)`
    static func ic_visa_checkout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_visa_checkout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_visa_logo_card", bundle: ..., traitCollection: ...)`
    static func ic_visa_logo_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_visa_logo_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_visacard", bundle: ..., traitCollection: ...)`
    static func ic_visacard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_visacard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_vodafone_checkout", bundle: ..., traitCollection: ...)`
    static func ic_vodafone_checkout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vodafone_checkout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_vodafone_topup_estore", bundle: ..., traitCollection: ...)`
    static func ic_vodafone_topup_estore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_vodafone_topup_estore, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_wallet_balance", bundle: ..., traitCollection: ...)`
    static func ic_wallet_balance(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_wallet_balance, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_warning_transfer", bundle: ..., traitCollection: ...)`
    static func ic_warning_transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_warning_transfer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_water_white_qatar_tabs", bundle: ..., traitCollection: ...)`
    static func ic_water_white_qatar_tabs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_water_white_qatar_tabs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_water_yellow_qatar_tabs", bundle: ..., traitCollection: ...)`
    static func ic_water_yellow_qatar_tabs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_water_yellow_qatar_tabs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_website_contact_us", bundle: ..., traitCollection: ...)`
    static func ic_website_contact_us(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_website_contact_us, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_world_map_my_card", bundle: ..., traitCollection: ...)`
    static func ic_world_map_my_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_world_map_my_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_wrong", bundle: ..., traitCollection: ...)`
    static func ic_wrong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_wrong, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "id_container_my_library", bundle: ..., traitCollection: ...)`
    static func id_container_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.id_container_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_fill_card", bundle: ..., traitCollection: ...)`
    static func img_fill_card(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_fill_card, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loading.gif", bundle: ..., traitCollection: ...)`
    static func loadingGif(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loadingGif, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_awqaf", bundle: ..., traitCollection: ...)`
    static func logo_awqaf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_awqaf, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_eid_charity", bundle: ..., traitCollection: ...)`
    static func logo_eid_charity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_eid_charity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_parkings", bundle: ..., traitCollection: ...)`
    static func logo_parkings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_parkings, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_qatar_charity", bundle: ..., traitCollection: ...)`
    static func logo_qatar_charity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_qatar_charity, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_qatar_cool", bundle: ..., traitCollection: ...)`
    static func logo_qatar_cool(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_qatar_cool, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_qatar_red", bundle: ..., traitCollection: ...)`
    static func logo_qatar_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_qatar_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loyalty_card_container_my_library", bundle: ..., traitCollection: ...)`
    static func loyalty_card_container_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loyalty_card_container_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "map_uodate_address", bundle: ..., traitCollection: ...)`
    static func map_uodate_address(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_uodate_address, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "passport_container_my_library", bundle: ..., traitCollection: ...)`
    static func passport_container_my_library(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.passport_container_my_library, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "photo_passport_details", bundle: ..., traitCollection: ...)`
    static func photo_passport_details(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.photo_passport_details, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 19 nibs.
  struct nib {
    /// Nib `AmmountCollectionViewCell`.
    static let ammountCollectionViewCell = _R.nib._AmmountCollectionViewCell()
    /// Nib `CharityAmountCollectionViewCell`.
    static let charityAmountCollectionViewCell = _R.nib._CharityAmountCollectionViewCell()
    /// Nib `CharityCartDetailsCollectionViewCell`.
    static let charityCartDetailsCollectionViewCell = _R.nib._CharityCartDetailsCollectionViewCell()
    /// Nib `CustomDropDown`.
    static let customDropDown = _R.nib._CustomDropDown()
    /// Nib `CustomPageControlView`.
    static let customPageControlView = _R.nib._CustomPageControlView()
    /// Nib `ExpandableCollectionViewCell`.
    static let expandableCollectionViewCell = _R.nib._ExpandableCollectionViewCell()
    /// Nib `GiftDenominationCollectionViewCell`.
    static let giftDenominationCollectionViewCell = _R.nib._GiftDenominationCollectionViewCell()
    /// Nib `GiftDenominationHeaderReusableView`.
    static let giftDenominationHeaderReusableView = _R.nib._GiftDenominationHeaderReusableView()
    /// Nib `HomeDropDownTableViewCell`.
    static let homeDropDownTableViewCell = _R.nib._HomeDropDownTableViewCell()
    /// Nib `ImageFSPagerCell`.
    static let imageFSPagerCell = _R.nib._ImageFSPagerCell()
    /// Nib `LibCardImageCollectionViewCell`.
    static let libCardImageCollectionViewCell = _R.nib._LibCardImageCollectionViewCell()
    /// Nib `LibraryTableViewCell`.
    static let libraryTableViewCell = _R.nib._LibraryTableViewCell()
    /// Nib `LibraryView`.
    static let libraryView = _R.nib._LibraryView()
    /// Nib `ProductCollectionViewCell`.
    static let productCollectionViewCell = _R.nib._ProductCollectionViewCell()
    /// Nib `ProductTableViewCell`.
    static let productTableViewCell = _R.nib._ProductTableViewCell()
    /// Nib `SelectAllHeaderView`.
    static let selectAllHeaderView = _R.nib._SelectAllHeaderView()
    /// Nib `ServiceCollectionViewCell`.
    static let serviceCollectionViewCell = _R.nib._ServiceCollectionViewCell()
    /// Nib `TaxiTripView`.
    static let taxiTripView = _R.nib._TaxiTripView()
    /// Nib `TransactionTableViewCell`.
    static let transactionTableViewCell = _R.nib._TransactionTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AmmountCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ammountCollectionViewCell) instead")
    static func ammountCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ammountCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CharityAmountCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.charityAmountCollectionViewCell) instead")
    static func charityAmountCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.charityAmountCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CharityCartDetailsCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.charityCartDetailsCollectionViewCell) instead")
    static func charityCartDetailsCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.charityCartDetailsCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomDropDown", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customDropDown) instead")
    static func customDropDown(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customDropDown)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomPageControlView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customPageControlView) instead")
    static func customPageControlView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customPageControlView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExpandableCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.expandableCollectionViewCell) instead")
    static func expandableCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.expandableCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GiftDenominationCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.giftDenominationCollectionViewCell) instead")
    static func giftDenominationCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.giftDenominationCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GiftDenominationHeaderReusableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.giftDenominationHeaderReusableView) instead")
    static func giftDenominationHeaderReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.giftDenominationHeaderReusableView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeDropDownTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeDropDownTableViewCell) instead")
    static func homeDropDownTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeDropDownTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ImageFSPagerCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imageFSPagerCell) instead")
    static func imageFSPagerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageFSPagerCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LibCardImageCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.libCardImageCollectionViewCell) instead")
    static func libCardImageCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.libCardImageCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LibraryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.libraryTableViewCell) instead")
    static func libraryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.libraryTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LibraryView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.libraryView) instead")
    static func libraryView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.libraryView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productCollectionViewCell) instead")
    static func productCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productTableViewCell) instead")
    static func productTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SelectAllHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.selectAllHeaderView) instead")
    static func selectAllHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectAllHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ServiceCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.serviceCollectionViewCell) instead")
    static func serviceCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.serviceCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TaxiTripView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.taxiTripView) instead")
    static func taxiTripView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.taxiTripView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransactionTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transactionTableViewCell) instead")
    static func transactionTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transactionTableViewCell)
    }
    #endif

    static func ammountCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AmmountCollectionViewCell? {
      return R.nib.ammountCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmmountCollectionViewCell
    }

    static func charityAmountCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CharityAmountCollectionViewCell? {
      return R.nib.charityAmountCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CharityAmountCollectionViewCell
    }

    static func charityCartDetailsCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CharityCartDetailsCollectionViewCell? {
      return R.nib.charityCartDetailsCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CharityCartDetailsCollectionViewCell
    }

    static func customDropDown(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomDropDown? {
      return R.nib.customDropDown.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomDropDown
    }

    static func customPageControlView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.customPageControlView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func expandableCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExpandableCollectionViewCell? {
      return R.nib.expandableCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExpandableCollectionViewCell
    }

    static func giftDenominationCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GiftDenominationCollectionViewCell? {
      return R.nib.giftDenominationCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GiftDenominationCollectionViewCell
    }

    static func giftDenominationHeaderReusableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GiftDenominationHeaderReusableView? {
      return R.nib.giftDenominationHeaderReusableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GiftDenominationHeaderReusableView
    }

    static func homeDropDownTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeDropDownTableViewCell? {
      return R.nib.homeDropDownTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeDropDownTableViewCell
    }

    static func imageFSPagerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageFSPagerCell? {
      return R.nib.imageFSPagerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageFSPagerCell
    }

    static func libCardImageCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LibCardImageCollectionViewCell? {
      return R.nib.libCardImageCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LibCardImageCollectionViewCell
    }

    static func libraryTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LibraryTableViewCell? {
      return R.nib.libraryTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LibraryTableViewCell
    }

    static func libraryView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LibraryView? {
      return R.nib.libraryView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LibraryView
    }

    static func productCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCollectionViewCell? {
      return R.nib.productCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCollectionViewCell
    }

    static func productTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductTableViewCell? {
      return R.nib.productTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductTableViewCell
    }

    static func selectAllHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.selectAllHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func serviceCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServiceCollectionViewCell? {
      return R.nib.serviceCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServiceCollectionViewCell
    }

    static func taxiTripView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.taxiTripView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func transactionTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionTableViewCell? {
      return R.nib.transactionTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 47 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AmmountCollectionViewCell`.
    static let ammountCollectionViewCell: Rswift.ReuseIdentifier<AmmountCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "AmmountCollectionViewCell")
    /// Reuse identifier `BeneficiaryTableViewCell`.
    static let beneficiaryTableViewCell: Rswift.ReuseIdentifier<BeneficiaryTableViewCell> = Rswift.ReuseIdentifier(identifier: "BeneficiaryTableViewCell")
    /// Reuse identifier `CharityAmountCollectionViewCell`.
    static let charityAmountCollectionViewCell: Rswift.ReuseIdentifier<CharityAmountCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "CharityAmountCollectionViewCell")
    /// Reuse identifier `CharityCartDetailsCollectionViewCell`.
    static let charityCartDetailsCollectionViewCell: Rswift.ReuseIdentifier<CharityCartDetailsCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "CharityCartDetailsCollectionViewCell")
    /// Reuse identifier `CountryTableViewCell`.
    static let countryTableViewCell: Rswift.ReuseIdentifier<CountryTableViewCell> = Rswift.ReuseIdentifier(identifier: "CountryTableViewCell")
    /// Reuse identifier `DashboardTableViewCell`.
    static let dashboardTableViewCell: Rswift.ReuseIdentifier<DashboardTableViewCell> = Rswift.ReuseIdentifier(identifier: "DashboardTableViewCell")
    /// Reuse identifier `EstoreTopupAmountCollectionViewCell`.
    static let estoreTopupAmountCollectionViewCell: Rswift.ReuseIdentifier<EstoreTopupAmountCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "EstoreTopupAmountCollectionViewCell")
    /// Reuse identifier `ExpandableCollectionViewCell`.
    static let expandableCollectionViewCell: Rswift.ReuseIdentifier<ExpandableCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ExpandableCollectionViewCell")
    /// Reuse identifier `GiftBrandCollectionViewCell`.
    static let giftBrandCollectionViewCell: Rswift.ReuseIdentifier<GiftBrandCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "GiftBrandCollectionViewCell")
    /// Reuse identifier `GiftDenominationCollectionViewCell`.
    static let giftDenominationCollectionViewCell: Rswift.ReuseIdentifier<GiftDenominationCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "GiftDenominationCollectionViewCell")
    /// Reuse identifier `GiftStoreCollectionViewCell`.
    static let giftStoreCollectionViewCell: Rswift.ReuseIdentifier<GiftStoreCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "GiftStoreCollectionViewCell")
    /// Reuse identifier `InvoiceCollectionViewCell`.
    static let invoiceCollectionViewCell: Rswift.ReuseIdentifier<InvoiceCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "InvoiceCollectionViewCell")
    /// Reuse identifier `InvoiceItemTableViewCell`.
    static let invoiceItemTableViewCell: Rswift.ReuseIdentifier<InvoiceItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "InvoiceItemTableViewCell")
    /// Reuse identifier `InvoicesSectionHeaderReusableView`.
    static let invoicesSectionHeaderReusableView: Rswift.ReuseIdentifier<InvoicesSectionHeaderReusableView> = Rswift.ReuseIdentifier(identifier: "InvoicesSectionHeaderReusableView")
    /// Reuse identifier `KarwaLocationTableViewCell`.
    static let karwaLocationTableViewCell: Rswift.ReuseIdentifier<KarwaLocationTableViewCell> = Rswift.ReuseIdentifier(identifier: "KarwaLocationTableViewCell")
    /// Reuse identifier `KarwaTaxiSavePlacesCollectionViewCell`.
    static let karwaTaxiSavePlacesCollectionViewCell: Rswift.ReuseIdentifier<KarwaTaxiSavePlacesCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "KarwaTaxiSavePlacesCollectionViewCell")
    /// Reuse identifier `LibCardImageCollectionViewCell`.
    static let libCardImageCollectionViewCell: Rswift.ReuseIdentifier<LibCardImageCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "LibCardImageCollectionViewCell")
    /// Reuse identifier `LibraryTableViewCell`.
    static let libraryTableViewCell: Rswift.ReuseIdentifier<LibraryTableViewCell> = Rswift.ReuseIdentifier(identifier: "LibraryTableViewCell")
    /// Reuse identifier `LimousineCollectionViewCell`.
    static let limousineCollectionViewCell: Rswift.ReuseIdentifier<LimousineCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "LimousineCollectionViewCell")
    /// Reuse identifier `MoneyTransferActionCollectionViewCell`.
    static let moneyTransferActionCollectionViewCell: Rswift.ReuseIdentifier<MoneyTransferActionCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MoneyTransferActionCollectionViewCell")
    /// Reuse identifier `MyBookCategoryCollectionViewCell`.
    static let myBookCategoryCollectionViewCell: Rswift.ReuseIdentifier<MyBookCategoryCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MyBookCategoryCollectionViewCell")
    /// Reuse identifier `MyBookCollectionCollectionViewCell`.
    static let myBookCollectionCollectionViewCell: Rswift.ReuseIdentifier<MyBookCollectionCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MyBookCollectionCollectionViewCell")
    /// Reuse identifier `MyBookOfferCollectionViewCell`.
    static let myBookOfferCollectionViewCell: Rswift.ReuseIdentifier<MyBookOfferCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MyBookOfferCollectionViewCell")
    /// Reuse identifier `MyBookStoreCollectionViewCell`.
    static let myBookStoreCollectionViewCell: Rswift.ReuseIdentifier<MyBookStoreCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MyBookStoreCollectionViewCell")
    /// Reuse identifier `MyBookStoreProductCollectionViewCell`.
    static let myBookStoreProductCollectionViewCell: Rswift.ReuseIdentifier<MyBookStoreProductCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MyBookStoreProductCollectionViewCell")
    /// Reuse identifier `MyBookStoresCategoryCollectionViewCell`.
    static let myBookStoresCategoryCollectionViewCell: Rswift.ReuseIdentifier<MyBookStoresCategoryCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MyBookStoresCategoryCollectionViewCell")
    /// Reuse identifier `MyOrderCollectionViewCell`.
    static let myOrderCollectionViewCell: Rswift.ReuseIdentifier<MyOrderCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MyOrderCollectionViewCell")
    /// Reuse identifier `NotificationTableViewCell`.
    static let notificationTableViewCell: Rswift.ReuseIdentifier<NotificationTableViewCell> = Rswift.ReuseIdentifier(identifier: "NotificationTableViewCell")
    /// Reuse identifier `ParkingCollectionViewCell`.
    static let parkingCollectionViewCell: Rswift.ReuseIdentifier<ParkingCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ParkingCollectionViewCell")
    /// Reuse identifier `ParkingPaymentTableViewCell`.
    static let parkingPaymentTableViewCell: Rswift.ReuseIdentifier<ParkingPaymentTableViewCell> = Rswift.ReuseIdentifier(identifier: "ParkingPaymentTableViewCell")
    /// Reuse identifier `PaymentAccountTableViewCell`.
    static let paymentAccountTableViewCell: Rswift.ReuseIdentifier<PaymentAccountTableViewCell> = Rswift.ReuseIdentifier(identifier: "PaymentAccountTableViewCell")
    /// Reuse identifier `ProductCollectionViewCell`.
    static let productCollectionViewCell: Rswift.ReuseIdentifier<ProductCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ProductCollectionViewCell")
    /// Reuse identifier `ProductTableViewCell`.
    static let productTableViewCell: Rswift.ReuseIdentifier<ProductTableViewCell> = Rswift.ReuseIdentifier(identifier: "ProductTableViewCell")
    /// Reuse identifier `QatarRedDonationCollectionViewCell`.
    static let qatarRedDonationCollectionViewCell: Rswift.ReuseIdentifier<QatarRedDonationCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "QatarRedDonationCollectionViewCell")
    /// Reuse identifier `RequestCarTableViewCell`.
    static let requestCarTableViewCell: Rswift.ReuseIdentifier<RequestCarTableViewCell> = Rswift.ReuseIdentifier(identifier: "RequestCarTableViewCell")
    /// Reuse identifier `ServiceCollectionViewCell`.
    static let serviceCollectionViewCell: Rswift.ReuseIdentifier<ServiceCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ServiceCollectionViewCell")
    /// Reuse identifier `SettingsTableViewCell`.
    static let settingsTableViewCell: Rswift.ReuseIdentifier<SettingsTableViewCell> = Rswift.ReuseIdentifier(identifier: "SettingsTableViewCell")
    /// Reuse identifier `ShopCollectionViewCell`.
    static let shopCollectionViewCell: Rswift.ReuseIdentifier<ShopCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ShopCollectionViewCell")
    /// Reuse identifier `StockDetailsTableViewCell`.
    static let stockDetailsTableViewCell: Rswift.ReuseIdentifier<StockDetailsTableViewCell> = Rswift.ReuseIdentifier(identifier: "StockDetailsTableViewCell")
    /// Reuse identifier `TabCollectionViewCell`.
    static let tabCollectionViewCell: Rswift.ReuseIdentifier<TabCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "TabCollectionViewCell")
    /// Reuse identifier `Test ID`.
    static let testID: Rswift.ReuseIdentifier<UIKit.UIView> = Rswift.ReuseIdentifier(identifier: "Test ID")
    /// Reuse identifier `TopUpAccountCollectionViewCell`.
    static let topUpAccountCollectionViewCell: Rswift.ReuseIdentifier<TopUpAccountCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "TopUpAccountCollectionViewCell")
    /// Reuse identifier `TopupPhotoCollectionViewCell`.
    static let topupPhotoCollectionViewCell: Rswift.ReuseIdentifier<TopupPhotoCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "TopupPhotoCollectionViewCell")
    /// Reuse identifier `TopupSelectCollectionViewCell`.
    static let topupSelectCollectionViewCell: Rswift.ReuseIdentifier<TopupSelectCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "TopupSelectCollectionViewCell")
    /// Reuse identifier `TopupTableViewCell`.
    static let topupTableViewCell: Rswift.ReuseIdentifier<TopupTableViewCell> = Rswift.ReuseIdentifier(identifier: "TopupTableViewCell")
    /// Reuse identifier `TopupTypeCollectionViewCell`.
    static let topupTypeCollectionViewCell: Rswift.ReuseIdentifier<TopupTypeCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "TopupTypeCollectionViewCell")
    /// Reuse identifier `TransactionTableViewCell`.
    static let transactionTableViewCell: Rswift.ReuseIdentifier<TransactionTableViewCell> = Rswift.ReuseIdentifier(identifier: "TransactionTableViewCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CharityAmountCollectionViewCell.validate()
      try _CustomDropDown.validate()
      try _ExpandableCollectionViewCell.validate()
      try _LibraryTableViewCell.validate()
      try _LibraryView.validate()
      try _ProductCollectionViewCell.validate()
      try _ProductTableViewCell.validate()
      try _SelectAllHeaderView.validate()
      try _TaxiTripView.validate()
      try _TransactionTableViewCell.validate()
    }

    struct _AmmountCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AmmountCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "AmmountCollectionViewCell"
      let name = "AmmountCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AmmountCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AmmountCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _CharityAmountCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CharityAmountCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "CharityAmountCollectionViewCell"
      let name = "CharityAmountCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CharityAmountCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CharityAmountCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "amount_circle_awqaf", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'amount_circle_awqaf' is used in nib 'CharityAmountCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CharityCartDetailsCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CharityCartDetailsCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "CharityCartDetailsCollectionViewCell"
      let name = "CharityCartDetailsCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CharityCartDetailsCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CharityCartDetailsCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _CustomDropDown: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CustomDropDown"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomDropDown? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomDropDown
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_arrow_down_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_down_gray' is used in nib 'CustomDropDown', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "light_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light_gray' is used in nib 'CustomDropDown', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CustomPageControlView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomPageControlView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ExpandableCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ExpandableCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "ExpandableCollectionViewCell"
      let name = "ExpandableCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExpandableCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExpandableCollectionViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_arrow_down_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_down_gray' is used in nib 'ExpandableCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "label_dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'label_dark_gray' is used in nib 'ExpandableCollectionViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "label_light_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'label_light_gray' is used in nib 'ExpandableCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _GiftDenominationCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GiftDenominationCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "GiftDenominationCollectionViewCell"
      let name = "GiftDenominationCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GiftDenominationCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GiftDenominationCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _GiftDenominationHeaderReusableView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GiftDenominationHeaderReusableView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GiftDenominationHeaderReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GiftDenominationHeaderReusableView
      }

      fileprivate init() {}
    }

    struct _HomeDropDownTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeDropDownTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeDropDownTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeDropDownTableViewCell
      }

      fileprivate init() {}
    }

    struct _ImageFSPagerCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ImageFSPagerCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageFSPagerCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageFSPagerCell
      }

      fileprivate init() {}
    }

    struct _LibCardImageCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LibCardImageCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "LibCardImageCollectionViewCell"
      let name = "LibCardImageCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LibCardImageCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LibCardImageCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _LibraryTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = LibraryTableViewCell

      let bundle = R.hostingBundle
      let identifier = "LibraryTableViewCell"
      let name = "LibraryTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LibraryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LibraryTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_black_clock_my_library", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_black_clock_my_library' is used in nib 'LibraryTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit_my_shops", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit_my_shops' is used in nib 'LibraryTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share_my_shops", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share_my_shops' is used in nib 'LibraryTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _LibraryView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "LibraryView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LibraryView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LibraryView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_bank_account", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bank_account' is used in nib 'LibraryView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "app_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'app_color' is used in nib 'LibraryView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProductCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProductCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "ProductCollectionViewCell"
      let name = "ProductCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCollectionViewCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'eye.fill' is used in nib 'ProductCollectionViewCell', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "ic_delete_invoice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete_invoice' is used in nib 'ProductCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit_my_shops", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit_my_shops' is used in nib 'ProductCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_empty_orders", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_empty_orders' is used in nib 'ProductCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_minus_invoice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_minus_invoice' is used in nib 'ProductCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus_invoice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus_invoice' is used in nib 'ProductCollectionViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_red_trash_my_products", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_red_trash_my_products' is used in nib 'ProductCollectionViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_gray' is used in nib 'ProductCollectionViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ProductTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProductTableViewCell

      let bundle = R.hostingBundle
      let identifier = "ProductTableViewCell"
      let name = "ProductTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_empty_orders", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_empty_orders' is used in nib 'ProductTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_minus_invoice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_minus_invoice' is used in nib 'ProductTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus_invoice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus_invoice' is used in nib 'ProductTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_gray' is used in nib 'ProductTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SelectAllHeaderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SelectAllHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "trash.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'trash.fill' is used in nib 'SelectAllHeaderView', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "donation_cart_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'donation_cart_green' is used in nib 'SelectAllHeaderView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ServiceCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ServiceCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "ServiceCollectionViewCell"
      let name = "ServiceCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ServiceCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ServiceCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _TaxiTripView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TaxiTripView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_arrow_request_car", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_request_car' is used in nib 'TaxiTripView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TransactionTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TransactionTableViewCell

      let bundle = R.hostingBundle
      let identifier = "TransactionTableViewCell"
      let name = "TransactionTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TransactionTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TransactionTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_transaction_out-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_transaction_out-1' is used in nib 'TransactionTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_transaction_person", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_transaction_person' is used in nib 'TransactionTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_gray' is used in nib 'TransactionTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "light_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light_gray' is used in nib 'TransactionTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try charity.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try eShops.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try information.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try myLibrary.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try others.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try store.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try transports.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct charity: Rswift.StoryboardResourceType, Rswift.Validatable {
      let awqafCartViewController = StoryboardViewControllerResource<AwqafCartViewController>(identifier: "AwqafCartViewController")
      let awqafViewController = StoryboardViewControllerResource<AwqafViewController>(identifier: "AwqafViewController")
      let bundle = R.hostingBundle
      let eidCartViewController = StoryboardViewControllerResource<EidCartViewController>(identifier: "EidCartViewController")
      let eidCharityViewController = StoryboardViewControllerResource<EidCharityViewController>(identifier: "EidCharityViewController")
      let name = "Charity"
      let qatarCharityCartViewController = StoryboardViewControllerResource<QatarCharityCartViewController>(identifier: "QatarCharityCartViewController")
      let qatarCharityViewController = StoryboardViewControllerResource<QatarCharityViewController>(identifier: "QatarCharityViewController")
      let qatarRedCartViewController = StoryboardViewControllerResource<QatarRedCartViewController>(identifier: "QatarRedCartViewController")
      let qatarRedTabsViewController = StoryboardViewControllerResource<QatarRedTabsViewController>(identifier: "QatarRedTabsViewController")
      let qatarRedViewController = StoryboardViewControllerResource<QatarRedViewController>(identifier: "QatarRedViewController")

      func awqafCartViewController(_: Void = ()) -> AwqafCartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: awqafCartViewController)
      }

      func awqafViewController(_: Void = ()) -> AwqafViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: awqafViewController)
      }

      func eidCartViewController(_: Void = ()) -> EidCartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eidCartViewController)
      }

      func eidCharityViewController(_: Void = ()) -> EidCharityViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eidCharityViewController)
      }

      func qatarCharityCartViewController(_: Void = ()) -> QatarCharityCartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qatarCharityCartViewController)
      }

      func qatarCharityViewController(_: Void = ()) -> QatarCharityViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qatarCharityViewController)
      }

      func qatarRedCartViewController(_: Void = ()) -> QatarRedCartViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qatarRedCartViewController)
      }

      func qatarRedTabsViewController(_: Void = ()) -> QatarRedTabsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qatarRedTabsViewController)
      }

      func qatarRedViewController(_: Void = ()) -> QatarRedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qatarRedViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bg_awqaf", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_awqaf' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_eid_charity", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_eid_charity' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_qatar_charity", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_qatar_charity' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_qatar_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_qatar_red' is used in storyboard 'Charity', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "cart.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'cart.fill' is used in storyboard 'Charity', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "ic_arrow_awqaf", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_awqaf' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_eid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_eid' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_qatar_charity", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_qatar_charity' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_qatar_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_qatar_red' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart_donation_cart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_donation_cart' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart_eid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_eid' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart_qatar_charity", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_qatar_charity' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cart_qatar_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cart_qatar_red' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_shelter_yellow_qatar_tabs", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_shelter_yellow_qatar_tabs' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_awqaf", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_awqaf' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_eid_charity", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_eid_charity' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_qatar_charity", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_qatar_charity' is used in storyboard 'Charity', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_qatar_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_qatar_red' is used in storyboard 'Charity', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Yellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Yellow' is used in storyboard 'Charity', but couldn't be loaded.") }
          if UIKit.UIColor(named: "amount_qatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'amount_qatar' is used in storyboard 'Charity', but couldn't be loaded.") }
          if UIKit.UIColor(named: "amount_qatar_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'amount_qatar_black' is used in storyboard 'Charity', but couldn't be loaded.") }
          if UIKit.UIColor(named: "cart_awqaf_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'cart_awqaf_green' is used in storyboard 'Charity', but couldn't be loaded.") }
          if UIKit.UIColor(named: "cart_eid_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'cart_eid_red' is used in storyboard 'Charity', but couldn't be loaded.") }
          if UIKit.UIColor(named: "cart_qatar_charity_pink", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'cart_qatar_charity_pink' is used in storyboard 'Charity', but couldn't be loaded.") }
          if UIKit.UIColor(named: "cart_qatar_crescent_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'cart_qatar_crescent_red' is used in storyboard 'Charity', but couldn't be loaded.") }
          if UIKit.UIColor(named: "drop_down_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'drop_down_placeholder' is used in storyboard 'Charity', but couldn't be loaded.") }
        }
        if _R.storyboard.charity().awqafCartViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'awqafCartViewController' could not be loaded from storyboard 'Charity' as 'AwqafCartViewController'.") }
        if _R.storyboard.charity().awqafViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'awqafViewController' could not be loaded from storyboard 'Charity' as 'AwqafViewController'.") }
        if _R.storyboard.charity().eidCartViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eidCartViewController' could not be loaded from storyboard 'Charity' as 'EidCartViewController'.") }
        if _R.storyboard.charity().eidCharityViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eidCharityViewController' could not be loaded from storyboard 'Charity' as 'EidCharityViewController'.") }
        if _R.storyboard.charity().qatarCharityCartViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qatarCharityCartViewController' could not be loaded from storyboard 'Charity' as 'QatarCharityCartViewController'.") }
        if _R.storyboard.charity().qatarCharityViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qatarCharityViewController' could not be loaded from storyboard 'Charity' as 'QatarCharityViewController'.") }
        if _R.storyboard.charity().qatarRedCartViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qatarRedCartViewController' could not be loaded from storyboard 'Charity' as 'QatarRedCartViewController'.") }
        if _R.storyboard.charity().qatarRedTabsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qatarRedTabsViewController' could not be loaded from storyboard 'Charity' as 'QatarRedTabsViewController'.") }
        if _R.storyboard.charity().qatarRedViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qatarRedViewController' could not be loaded from storyboard 'Charity' as 'QatarRedViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct eShops: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let eStoreTopupViewController = StoryboardViewControllerResource<EStoreTopupViewController>(identifier: "EStoreTopupViewController")
      let giftCardPurchaseViewController = StoryboardViewControllerResource<GiftCardPurchaseViewController>(identifier: "GiftCardPurchaseViewController")
      let giftDenominationsViewController = StoryboardViewControllerResource<GiftDenominationsViewController>(identifier: "GiftDenominationsViewController")
      let giftStoresViewController = StoryboardViewControllerResource<GiftStoresViewController>(identifier: "GiftStoresViewController")
      let internationalTopupViewController = StoryboardViewControllerResource<InternationalTopupViewController>(identifier: "InternationalTopupViewController")
      let myBookFavouritesViewController = StoryboardViewControllerResource<MyBookFavouritesViewController>(identifier: "MyBookFavouritesViewController")
      let myBookNotificationsViewController = StoryboardViewControllerResource<MyBookNotificationsViewController>(identifier: "MyBookNotificationsViewController")
      let myBookOutletsViewController = StoryboardViewControllerResource<MyBookOutletsViewController>(identifier: "MyBookOutletsViewController")
      let myBookProfileViewController = StoryboardViewControllerResource<MyBookProfileViewController>(identifier: "MyBookProfileViewController")
      let myBookStoreViewController = StoryboardViewControllerResource<MyBookStoreViewController>(identifier: "MyBookStoreViewController")
      let myBookStoresViewController = StoryboardViewControllerResource<MyBookStoresViewController>(identifier: "MyBookStoresViewController")
      let myBookTabBarController = StoryboardViewControllerResource<MyBookTabBarController>(identifier: "MyBookTabBarController")
      let myBookViewController = StoryboardViewControllerResource<MyBookViewController>(identifier: "MyBookViewController")
      let name = "EShops"
      let selectTopupAmountViewController = StoryboardViewControllerResource<SelectTopupAmountViewController>(identifier: "SelectTopupAmountViewController")

      func eStoreTopupViewController(_: Void = ()) -> EStoreTopupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eStoreTopupViewController)
      }

      func giftCardPurchaseViewController(_: Void = ()) -> GiftCardPurchaseViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: giftCardPurchaseViewController)
      }

      func giftDenominationsViewController(_: Void = ()) -> GiftDenominationsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: giftDenominationsViewController)
      }

      func giftStoresViewController(_: Void = ()) -> GiftStoresViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: giftStoresViewController)
      }

      func internationalTopupViewController(_: Void = ()) -> InternationalTopupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: internationalTopupViewController)
      }

      func myBookFavouritesViewController(_: Void = ()) -> MyBookFavouritesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myBookFavouritesViewController)
      }

      func myBookNotificationsViewController(_: Void = ()) -> MyBookNotificationsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myBookNotificationsViewController)
      }

      func myBookOutletsViewController(_: Void = ()) -> MyBookOutletsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myBookOutletsViewController)
      }

      func myBookProfileViewController(_: Void = ()) -> MyBookProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myBookProfileViewController)
      }

      func myBookStoreViewController(_: Void = ()) -> MyBookStoreViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myBookStoreViewController)
      }

      func myBookStoresViewController(_: Void = ()) -> MyBookStoresViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myBookStoresViewController)
      }

      func myBookTabBarController(_: Void = ()) -> MyBookTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myBookTabBarController)
      }

      func myBookViewController(_: Void = ()) -> MyBookViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myBookViewController)
      }

      func selectTopupAmountViewController(_: Void = ()) -> SelectTopupAmountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectTopupAmountViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "bell.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'bell.fill' is used in storyboard 'EShops', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "bg_circle_topup_estore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_circle_topup_estore' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_gift_cards", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_gift_cards' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_ice_cream_my_book", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_ice_cream_my_book' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_my_book", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_my_book' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_my_book_product", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_my_book_product' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_qatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_qatar' is used in storyboard 'EShops', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "heart.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'heart.fill' is used in storyboard 'EShops', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "house.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'house.fill' is used in storyboard 'EShops', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "ic_adv_banner_my_book", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_adv_banner_my_book' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_adv_banner_topup_estore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_adv_banner_topup_estore' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_down_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_down_gray' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_down_my_book_product", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_down_my_book_product' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_right_kahramaa", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_right_kahramaa' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_food_my_book", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_food_my_book' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_halal_my_book_product", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_halal_my_book_product' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_ice_cream_my_book", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_ice_cream_my_book' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_indoor_my_book_product", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_indoor_my_book_product' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_international_photo_topup_estore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_international_photo_topup_estore' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_international_topup_estore", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_international_topup_estore' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo_my_book", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo_my_book' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_outlet_my_book", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_outlet_my_book' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_parking_my_book_product", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_parking_my_book_product' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_qatar_flag_gift_purchase", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_qatar_flag_gift_purchase' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share_my_book_product", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share_my_book_product' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share_my_shops", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share_my_shops' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_takeaway_my_book_product", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_takeaway_my_book_product' is used in storyboard 'EShops', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'EShops', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "magnifyingglass") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'magnifyingglass' is used in storyboard 'EShops', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "person.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'person.fill' is used in storyboard 'EShops', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "app_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'app_color' is used in storyboard 'EShops', but couldn't be loaded.") }
          if UIKit.UIColor(named: "brown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'brown' is used in storyboard 'EShops', but couldn't be loaded.") }
          if UIKit.UIColor(named: "dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_gray' is used in storyboard 'EShops', but couldn't be loaded.") }
          if UIKit.UIColor(named: "dark_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_red' is used in storyboard 'EShops', but couldn't be loaded.") }
          if UIKit.UIColor(named: "drop_down_placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'drop_down_placeholder' is used in storyboard 'EShops', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gift_background_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gift_background_gray' is used in storyboard 'EShops', but couldn't be loaded.") }
          if UIKit.UIColor(named: "label_dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'label_dark_gray' is used in storyboard 'EShops', but couldn't be loaded.") }
          if UIKit.UIColor(named: "light_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light_gray' is used in storyboard 'EShops', but couldn't be loaded.") }
          if UIKit.UIColor(named: "light_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light_red' is used in storyboard 'EShops', but couldn't be loaded.") }
          if UIKit.UIColor(named: "my_book_background_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'my_book_background_gray' is used in storyboard 'EShops', but couldn't be loaded.") }
          if UIKit.UIColor(named: "my_book_selected_tab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'my_book_selected_tab' is used in storyboard 'EShops', but couldn't be loaded.") }
          if UIKit.UIColor(named: "my_book_teal", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'my_book_teal' is used in storyboard 'EShops', but couldn't be loaded.") }
          if UIKit.UIColor(named: "my_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'my_red' is used in storyboard 'EShops', but couldn't be loaded.") }
        }
        if _R.storyboard.eShops().eStoreTopupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eStoreTopupViewController' could not be loaded from storyboard 'EShops' as 'EStoreTopupViewController'.") }
        if _R.storyboard.eShops().giftCardPurchaseViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'giftCardPurchaseViewController' could not be loaded from storyboard 'EShops' as 'GiftCardPurchaseViewController'.") }
        if _R.storyboard.eShops().giftDenominationsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'giftDenominationsViewController' could not be loaded from storyboard 'EShops' as 'GiftDenominationsViewController'.") }
        if _R.storyboard.eShops().giftStoresViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'giftStoresViewController' could not be loaded from storyboard 'EShops' as 'GiftStoresViewController'.") }
        if _R.storyboard.eShops().internationalTopupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'internationalTopupViewController' could not be loaded from storyboard 'EShops' as 'InternationalTopupViewController'.") }
        if _R.storyboard.eShops().myBookFavouritesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myBookFavouritesViewController' could not be loaded from storyboard 'EShops' as 'MyBookFavouritesViewController'.") }
        if _R.storyboard.eShops().myBookNotificationsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myBookNotificationsViewController' could not be loaded from storyboard 'EShops' as 'MyBookNotificationsViewController'.") }
        if _R.storyboard.eShops().myBookOutletsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myBookOutletsViewController' could not be loaded from storyboard 'EShops' as 'MyBookOutletsViewController'.") }
        if _R.storyboard.eShops().myBookProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myBookProfileViewController' could not be loaded from storyboard 'EShops' as 'MyBookProfileViewController'.") }
        if _R.storyboard.eShops().myBookStoreViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myBookStoreViewController' could not be loaded from storyboard 'EShops' as 'MyBookStoreViewController'.") }
        if _R.storyboard.eShops().myBookStoresViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myBookStoresViewController' could not be loaded from storyboard 'EShops' as 'MyBookStoresViewController'.") }
        if _R.storyboard.eShops().myBookTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myBookTabBarController' could not be loaded from storyboard 'EShops' as 'MyBookTabBarController'.") }
        if _R.storyboard.eShops().myBookViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myBookViewController' could not be loaded from storyboard 'EShops' as 'MyBookViewController'.") }
        if _R.storyboard.eShops().selectTopupAmountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectTopupAmountViewController' could not be loaded from storyboard 'EShops' as 'SelectTopupAmountViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct information: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Information"
      let stocksDetailsViewController = StoryboardViewControllerResource<StocksDetailsViewController>(identifier: "StocksDetailsViewController")
      let stocksViewController = StoryboardViewControllerResource<StocksViewController>(identifier: "StocksViewController")

      func stocksDetailsViewController(_: Void = ()) -> StocksDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: stocksDetailsViewController)
      }

      func stocksViewController(_: Void = ()) -> StocksViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: stocksViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bg_stocks_curve", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_stocks_curve' is used in storyboard 'Information', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Information', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'Information', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus_stocks", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus_stocks' is used in storyboard 'Information', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "label_dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'label_dark_gray' is used in storyboard 'Information', but couldn't be loaded.") }
          if UIKit.UIColor(named: "label_light_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'label_light_gray' is used in storyboard 'Information', but couldn't be loaded.") }
          if UIKit.UIColor(named: "stock_dark_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'stock_dark_green' is used in storyboard 'Information', but couldn't be loaded.") }
          if UIKit.UIColor(named: "stock_light_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'stock_light_green' is used in storyboard 'Information', but couldn't be loaded.") }
          if UIKit.UIColor(named: "stocks_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'stocks_blue' is used in storyboard 'Information', but couldn't be loaded.") }
        }
        if _R.storyboard.information().stocksDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'stocksDetailsViewController' could not be loaded from storyboard 'Information' as 'StocksDetailsViewController'.") }
        if _R.storyboard.information().stocksViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'stocksViewController' could not be loaded from storyboard 'Information' as 'StocksViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "bg_lunch_screen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_lunch_screen' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainNavigationController

      let aboutAppViewController = StoryboardViewControllerResource<AboutAppViewController>(identifier: "AboutAppViewController")
      let addBeneficiaryViewController = StoryboardViewControllerResource<AddBeneficiaryViewController>(identifier: "AddBeneficiaryViewController")
      let addCardOrBankViewController = StoryboardViewControllerResource<AddCardOrBankViewController>(identifier: "AddCardOrBankViewController")
      let analyticsViewController = StoryboardViewControllerResource<DashboardViewController>(identifier: "AnalyticsViewController")
      let beneficiariesViewController = StoryboardViewControllerResource<BeneficiariesViewController>(identifier: "BeneficiariesViewController")
      let beneficiaryComingSoonViewController = StoryboardViewControllerResource<BeneficiaryComingSoonViewController>(identifier: "BeneficiaryComingSoonViewController")
      let beneficiaryInformationViewController = StoryboardViewControllerResource<BeneficiaryInformationViewController>(identifier: "BeneficiaryInformationViewController")
      let bundle = R.hostingBundle
      let cardRecognizerViewController = StoryboardViewControllerResource<CardRecognizerViewController>(identifier: "CardRecognizerViewController")
      let checkoutViewController = StoryboardViewControllerResource<CheckoutViewController>(identifier: "CheckoutViewController")
      let confirmForgetPasswordViewController = StoryboardViewControllerResource<ConfirmForgetPasswordViewController>(identifier: "ConfirmForgetPasswordViewController")
      let confirmPaymentRequestViewController = StoryboardViewControllerResource<ConfirmPaymentRequestViewController>(identifier: "ConfirmPaymentRequestViewController")
      let confirmPhoneNumberViewController = StoryboardViewControllerResource<ConfirmPhoneNumberViewController>(identifier: "ConfirmPhoneNumberViewController")
      let confirmPinCodeViewController = StoryboardViewControllerResource<ConfirmPinCodeViewController>(identifier: "ConfirmPinCodeViewController")
      let confirmQRCodePayViewController = StoryboardViewControllerResource<ConfirmQRCodePayViewController>(identifier: "ConfirmQRCodePayViewController")
      let confirmTransferViewController = StoryboardViewControllerResource<ConfirmTransferViewController>(identifier: "ConfirmTransferViewController")
      let contactsUsViewController = StoryboardViewControllerResource<ContactsUsViewController>(identifier: "ContactsUsViewController")
      let countriesViewController = StoryboardViewControllerResource<CountriesViewController>(identifier: "CountriesViewController")
      let createAccountViewController = StoryboardViewControllerResource<CreateAccountViewController>(identifier: "CreateAccountViewController")
      let creditCardAccountViewController = StoryboardViewControllerResource<CreditCardAccountViewController>(identifier: "CreditCardAccountViewController")
      let debitCardAccountViewController = StoryboardViewControllerResource<DebitCardAccountViewController>(identifier: "DebitCardAccountViewController")
      let editBalanceViewController = StoryboardViewControllerResource<EditBalanceViewController>(identifier: "EditBalanceViewController")
      let editSavedTopupViewController = StoryboardViewControllerResource<EditSavedTopupViewController>(identifier: "EditSavedTopupViewController")
      let errorMessageViewController = StoryboardViewControllerResource<ErrorMessageViewController>(identifier: "ErrorMessageViewController")
      let forgotPasswordViewController = StoryboardViewControllerResource<ForgotPasswordViewController>(identifier: "ForgotPasswordViewController")
      let homeViewController = StoryboardViewControllerResource<HomeViewController>(identifier: "HomeViewController")
      let loadingViewController = StoryboardViewControllerResource<LoadingViewController>(identifier: "LoadingViewController")
      let loginAndSecurityViewController = StoryboardViewControllerResource<LoginAndSecurityViewController>(identifier: "LoginAndSecurityViewController")
      let mainNavigationController = StoryboardViewControllerResource<MainNavigationController>(identifier: "MainNavigationController")
      let moneyTransferViewController = StoryboardViewControllerResource<MoneyTransferViewController>(identifier: "MoneyTransferViewController")
      let myCardsAndBanksViewController = StoryboardViewControllerResource<MyCardsAndBanksViewController>(identifier: "MyCardsAndBanksViewController")
      let mySplashViewController = StoryboardViewControllerResource<MySplashViewController>(identifier: "MySplashViewController")
      let name = "Main"
      let noqoodyCodeViewController = StoryboardViewControllerResource<NoqoodyCodeViewController>(identifier: "NoqoodyCodeViewController")
      let notificationsSettingsViewController = StoryboardViewControllerResource<NotificationsSettingsViewController>(identifier: "NotificationsSettingsViewController")
      let notificationsViewController = StoryboardViewControllerResource<NotificationsViewController>(identifier: "NotificationsViewController")
      let ooredooAccountViewController = StoryboardViewControllerResource<OoredooAccountViewController>(identifier: "OoredooAccountViewController")
      let passportScannerViewController = StoryboardViewControllerResource<PassportScannerViewController>(identifier: "PassportScannerViewController")
      let passportViewController = StoryboardViewControllerResource<PassportViewController>(identifier: "PassportViewController")
      let payViewController = StoryboardViewControllerResource<PayViewController>(identifier: "PayViewController")
      let paymentAccountViewController = StoryboardViewControllerResource<PaymentAccountViewController>(identifier: "PaymentAccountViewController")
      let personalInfoViewController = StoryboardViewControllerResource<PersonalInfoViewController>(identifier: "PersonalInfoViewController")
      let privacyPolicyViewController = StoryboardViewControllerResource<PrivacyPolicyViewController>(identifier: "PrivacyPolicyViewController")
      let qidViewController = StoryboardViewControllerResource<QIDViewController>(identifier: "QIDViewController")
      let qrScannerViewController = StoryboardViewControllerResource<QRScannerViewController>(identifier: "QRScannerViewController")
      let refillWalletViewController = StoryboardViewControllerResource<RefillWalletViewController>(identifier: "RefillWalletViewController")
      let removePaymentRequestViewController = StoryboardViewControllerResource<RemovePaymentRequestViewController>(identifier: "RemovePaymentRequestViewController")
      let requestMoneyViewController = StoryboardViewControllerResource<RequestMoneyViewController>(identifier: "RequestMoneyViewController")
      let resetPinViewController = StoryboardViewControllerResource<ResetPinViewController>(identifier: "ResetPinViewController")
      let selectBeneficiaryPopupViewController = StoryboardViewControllerResource<SelectBeneficiaryPopupViewController>(identifier: "SelectBeneficiaryPopupViewController")
      let selectTopupAccountViewController = StoryboardViewControllerResource<SelectTopupAccountViewController>(identifier: "SelectTopupAccountViewController")
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")
      let signInViewController = StoryboardViewControllerResource<SignInViewController>(identifier: "SignInViewController")
      let signUpViewController = StoryboardViewControllerResource<SignUpViewController>(identifier: "SignUpViewController")
      let signatureViewController = StoryboardViewControllerResource<SignatureViewController>(identifier: "SignatureViewController")
      let successMessageViewController = StoryboardViewControllerResource<SuccessMessageViewController>(identifier: "SuccessMessageViewController")
      let topUpAccountSettingsViewController = StoryboardViewControllerResource<TopUpAccountSettingsViewController>(identifier: "TopUpAccountSettingsViewController")
      let touchIDViewController = StoryboardViewControllerResource<TouchIDViewController>(identifier: "TouchIDViewController")
      let transactionsViewController = StoryboardViewControllerResource<TransactionsViewController>(identifier: "TransactionsViewController")
      let transferViewController = StoryboardViewControllerResource<TransferViewController>(identifier: "TransferViewController")
      let updateAddressViewController = StoryboardViewControllerResource<UpdateAddressViewController>(identifier: "UpdateAddressViewController")
      let updateEmailViewController = StoryboardViewControllerResource<UpdateEmailViewController>(identifier: "UpdateEmailViewController")
      let updateMobileViewController = StoryboardViewControllerResource<UpdateMobileViewController>(identifier: "UpdateMobileViewController")
      let updatePhotoViewController = StoryboardViewControllerResource<UpdatePhotoViewController>(identifier: "UpdatePhotoViewController")
      let uploadPassportViewController = StoryboardViewControllerResource<UploadPassportViewController>(identifier: "UploadPassportViewController")
      let uploadQIDViewController = StoryboardViewControllerResource<UploadQIDViewController>(identifier: "UploadQIDViewController")
      let viewQIDViewController = StoryboardViewControllerResource<ViewQIDViewController>(identifier: "ViewQIDViewController")
      let vodafoneAccountViewController = StoryboardViewControllerResource<VodafoneAccountViewController>(identifier: "VodafoneAccountViewController")
      let webViewController = StoryboardViewControllerResource<WebViewController>(identifier: "WebViewController")

      func aboutAppViewController(_: Void = ()) -> AboutAppViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutAppViewController)
      }

      func addBeneficiaryViewController(_: Void = ()) -> AddBeneficiaryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addBeneficiaryViewController)
      }

      func addCardOrBankViewController(_: Void = ()) -> AddCardOrBankViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addCardOrBankViewController)
      }

      func analyticsViewController(_: Void = ()) -> DashboardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: analyticsViewController)
      }

      func beneficiariesViewController(_: Void = ()) -> BeneficiariesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: beneficiariesViewController)
      }

      func beneficiaryComingSoonViewController(_: Void = ()) -> BeneficiaryComingSoonViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: beneficiaryComingSoonViewController)
      }

      func beneficiaryInformationViewController(_: Void = ()) -> BeneficiaryInformationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: beneficiaryInformationViewController)
      }

      func cardRecognizerViewController(_: Void = ()) -> CardRecognizerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cardRecognizerViewController)
      }

      func checkoutViewController(_: Void = ()) -> CheckoutViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: checkoutViewController)
      }

      func confirmForgetPasswordViewController(_: Void = ()) -> ConfirmForgetPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmForgetPasswordViewController)
      }

      func confirmPaymentRequestViewController(_: Void = ()) -> ConfirmPaymentRequestViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmPaymentRequestViewController)
      }

      func confirmPhoneNumberViewController(_: Void = ()) -> ConfirmPhoneNumberViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmPhoneNumberViewController)
      }

      func confirmPinCodeViewController(_: Void = ()) -> ConfirmPinCodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmPinCodeViewController)
      }

      func confirmQRCodePayViewController(_: Void = ()) -> ConfirmQRCodePayViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmQRCodePayViewController)
      }

      func confirmTransferViewController(_: Void = ()) -> ConfirmTransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmTransferViewController)
      }

      func contactsUsViewController(_: Void = ()) -> ContactsUsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: contactsUsViewController)
      }

      func countriesViewController(_: Void = ()) -> CountriesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: countriesViewController)
      }

      func createAccountViewController(_: Void = ()) -> CreateAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createAccountViewController)
      }

      func creditCardAccountViewController(_: Void = ()) -> CreditCardAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: creditCardAccountViewController)
      }

      func debitCardAccountViewController(_: Void = ()) -> DebitCardAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: debitCardAccountViewController)
      }

      func editBalanceViewController(_: Void = ()) -> EditBalanceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editBalanceViewController)
      }

      func editSavedTopupViewController(_: Void = ()) -> EditSavedTopupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editSavedTopupViewController)
      }

      func errorMessageViewController(_: Void = ()) -> ErrorMessageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: errorMessageViewController)
      }

      func forgotPasswordViewController(_: Void = ()) -> ForgotPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordViewController)
      }

      func homeViewController(_: Void = ()) -> HomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeViewController)
      }

      func loadingViewController(_: Void = ()) -> LoadingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loadingViewController)
      }

      func loginAndSecurityViewController(_: Void = ()) -> LoginAndSecurityViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginAndSecurityViewController)
      }

      func mainNavigationController(_: Void = ()) -> MainNavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainNavigationController)
      }

      func moneyTransferViewController(_: Void = ()) -> MoneyTransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: moneyTransferViewController)
      }

      func myCardsAndBanksViewController(_: Void = ()) -> MyCardsAndBanksViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myCardsAndBanksViewController)
      }

      func mySplashViewController(_: Void = ()) -> MySplashViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mySplashViewController)
      }

      func noqoodyCodeViewController(_: Void = ()) -> NoqoodyCodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: noqoodyCodeViewController)
      }

      func notificationsSettingsViewController(_: Void = ()) -> NotificationsSettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsSettingsViewController)
      }

      func notificationsViewController(_: Void = ()) -> NotificationsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsViewController)
      }

      func ooredooAccountViewController(_: Void = ()) -> OoredooAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ooredooAccountViewController)
      }

      func passportScannerViewController(_: Void = ()) -> PassportScannerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: passportScannerViewController)
      }

      func passportViewController(_: Void = ()) -> PassportViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: passportViewController)
      }

      func payViewController(_: Void = ()) -> PayViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: payViewController)
      }

      func paymentAccountViewController(_: Void = ()) -> PaymentAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentAccountViewController)
      }

      func personalInfoViewController(_: Void = ()) -> PersonalInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: personalInfoViewController)
      }

      func privacyPolicyViewController(_: Void = ()) -> PrivacyPolicyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: privacyPolicyViewController)
      }

      func qidViewController(_: Void = ()) -> QIDViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qidViewController)
      }

      func qrScannerViewController(_: Void = ()) -> QRScannerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qrScannerViewController)
      }

      func refillWalletViewController(_: Void = ()) -> RefillWalletViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: refillWalletViewController)
      }

      func removePaymentRequestViewController(_: Void = ()) -> RemovePaymentRequestViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: removePaymentRequestViewController)
      }

      func requestMoneyViewController(_: Void = ()) -> RequestMoneyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: requestMoneyViewController)
      }

      func resetPinViewController(_: Void = ()) -> ResetPinViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPinViewController)
      }

      func selectBeneficiaryPopupViewController(_: Void = ()) -> SelectBeneficiaryPopupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectBeneficiaryPopupViewController)
      }

      func selectTopupAccountViewController(_: Void = ()) -> SelectTopupAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: selectTopupAccountViewController)
      }

      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }

      func signInViewController(_: Void = ()) -> SignInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInViewController)
      }

      func signUpViewController(_: Void = ()) -> SignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpViewController)
      }

      func signatureViewController(_: Void = ()) -> SignatureViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signatureViewController)
      }

      func successMessageViewController(_: Void = ()) -> SuccessMessageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: successMessageViewController)
      }

      func topUpAccountSettingsViewController(_: Void = ()) -> TopUpAccountSettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: topUpAccountSettingsViewController)
      }

      func touchIDViewController(_: Void = ()) -> TouchIDViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: touchIDViewController)
      }

      func transactionsViewController(_: Void = ()) -> TransactionsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transactionsViewController)
      }

      func transferViewController(_: Void = ()) -> TransferViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: transferViewController)
      }

      func updateAddressViewController(_: Void = ()) -> UpdateAddressViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updateAddressViewController)
      }

      func updateEmailViewController(_: Void = ()) -> UpdateEmailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updateEmailViewController)
      }

      func updateMobileViewController(_: Void = ()) -> UpdateMobileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updateMobileViewController)
      }

      func updatePhotoViewController(_: Void = ()) -> UpdatePhotoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updatePhotoViewController)
      }

      func uploadPassportViewController(_: Void = ()) -> UploadPassportViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: uploadPassportViewController)
      }

      func uploadQIDViewController(_: Void = ()) -> UploadQIDViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: uploadQIDViewController)
      }

      func viewQIDViewController(_: Void = ()) -> ViewQIDViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewQIDViewController)
      }

      func vodafoneAccountViewController(_: Void = ()) -> VodafoneAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: vodafoneAccountViewController)
      }

      func webViewController(_: Void = ()) -> WebViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: webViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bg_about_app", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_about_app' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_analytics", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_analytics' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_analytics_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_analytics_blue' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_beneficiaries", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_beneficiaries' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_btn_login", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_btn_login' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_btn_pay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_btn_pay' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_confirm_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_confirm_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_contacts_us", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_contacts_us' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_credit_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_credit_card' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_error_message", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_error_message' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_home_bar_bottom", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_home_bar_bottom' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_left_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_left_circle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_login", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_login' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_lunch_screen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_lunch_screen' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_middle_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_middle_circle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_money_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_money_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_my_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_my_card' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_passport", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_passport' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_payment_request_top", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_payment_request_top' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_qatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_qatar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_qr_code", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_qr_code' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_refill_wallet", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_refill_wallet' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_right_circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_right_circle' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_select_account", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_select_account' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_settings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_settings' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_square_upload_passport", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_square_upload_passport' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_success_message", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_success_message' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_top_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_top_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_transactions", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_transactions' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "camera.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'camera.fill' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'eye' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye.slash") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'eye.slash' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "ic_american_express_checkout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_american_express_checkout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_down_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_down_gray' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_down_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_down_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_fill_down_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_fill_down_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_money_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_money_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_right_kahramaa", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_right_kahramaa' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_right_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_right_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_settings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_settings' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_avatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_avatar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_bank_add_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bank_add_card' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_beneficiaries_money_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_beneficiaries_money_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_beneficiaries_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_beneficiaries_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_bill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bill' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_camera_back_uploadQID", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera_back_uploadQID' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_camera_front_uploadQID", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera_front_uploadQID' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_camera_upload_passport", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera_upload_passport' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_card' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_card_my_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_card_my_card' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_card_uploadQID", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_card_uploadQID' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_check_success_message", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_check_success_message' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chip_add_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chip_add_card' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_contact_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_contact_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_create_account_check", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_create_account_check' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_create_account_house", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_create_account_house' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_create_account_mobile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_create_account_mobile' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_credit_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_credit_card' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_debit_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_debit_card' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_ellipses", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_ellipses' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_ellipses_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_ellipses_black' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email_contact_us", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email_contact_us' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_emptyTransaction_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_emptyTransaction_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_enter_pin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_enter_pin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_finger_print", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_finger_print' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_gallery", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_gallery' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_gallery_upload_passport", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_gallery_upload_passport' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_gear", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_gear' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_information_seperator_analytics", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_information_seperator_analytics' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_invoice_analytics", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_invoice_analytics' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo_checkout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo_checkout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logout_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logout_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_map_contacts_us", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_map_contacts_us' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_maroon_card_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_maroon_card_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_mobile_contact_us", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_mobile_contact_us' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_mobile_qid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_mobile_qid' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_mobile_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_mobile_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_my_library_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_my_library_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_my_wallet_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_my_wallet_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_naps_checkout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_naps_checkout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_noqs_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_noqs_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_ooredoo_checkout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_ooredoo_checkout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_ooredoo_money_checkout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_ooredoo_money_checkout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_or_pay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_or_pay' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_passport", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_passport' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_password", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_password' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_paypal_checkout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_paypal_checkout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_person", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_person' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus_invoice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus_invoice' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_qatar_flag_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_qatar_flag_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_qatar_pay_checkout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_qatar_pay_checkout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_qid", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_qid' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_qpan_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_qpan_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_qr_code_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_qr_code_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_qrcode_shape", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_qrcode_shape' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_qrcode_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_qrcode_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_scanQR", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_scanQR' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_scanQR_pay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_scanQR_pay' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_scan_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_scan_card' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_scan_my_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_scan_my_card' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_scan_qpan_add_beneficiaries", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_scan_qpan_add_beneficiaries' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_scan_qr_code", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_scan_qr_code' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_scan_to_pay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_scan_to_pay' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_scan_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_scan_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_shop_analytics", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_shop_analytics' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_signature_pen", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_signature_pen' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_topup_money_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_topup_money_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_topup_personal_info", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_topup_personal_info' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_upload_passport", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_upload_passport' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_upload_pay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_upload_pay' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_vendex_pay_home", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_vendex_pay_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_viewAll_arrow_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_viewAll_arrow_red' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_visa_checkout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_visa_checkout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_vodafone_checkout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_vodafone_checkout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_warning_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_warning_transfer' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_website_contact_us", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_website_contact_us' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_world_map_my_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_world_map_my_card' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_fill_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_fill_card' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "info.circle.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'info.circle.fill' is used in storyboard 'Main', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "trash") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'trash' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "trash.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'trash.fill' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Yellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Yellow' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "app_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'app_color' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "brown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'brown' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_gray' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "dark_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_red' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "error_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'error_red' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'green' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "green_success", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'green_success' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "label_dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'label_dark_gray' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "light_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light_gray' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "light_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light_red' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "main_bg_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'main_bg_blue' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "my_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'my_red' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'orange' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().aboutAppViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutAppViewController' could not be loaded from storyboard 'Main' as 'AboutAppViewController'.") }
        if _R.storyboard.main().addBeneficiaryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addBeneficiaryViewController' could not be loaded from storyboard 'Main' as 'AddBeneficiaryViewController'.") }
        if _R.storyboard.main().addCardOrBankViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addCardOrBankViewController' could not be loaded from storyboard 'Main' as 'AddCardOrBankViewController'.") }
        if _R.storyboard.main().analyticsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'analyticsViewController' could not be loaded from storyboard 'Main' as 'AnalyticsViewController'.") }
        if _R.storyboard.main().beneficiariesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'beneficiariesViewController' could not be loaded from storyboard 'Main' as 'BeneficiariesViewController'.") }
        if _R.storyboard.main().beneficiaryComingSoonViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'beneficiaryComingSoonViewController' could not be loaded from storyboard 'Main' as 'BeneficiaryComingSoonViewController'.") }
        if _R.storyboard.main().beneficiaryInformationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'beneficiaryInformationViewController' could not be loaded from storyboard 'Main' as 'BeneficiaryInformationViewController'.") }
        if _R.storyboard.main().cardRecognizerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cardRecognizerViewController' could not be loaded from storyboard 'Main' as 'CardRecognizerViewController'.") }
        if _R.storyboard.main().checkoutViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'checkoutViewController' could not be loaded from storyboard 'Main' as 'CheckoutViewController'.") }
        if _R.storyboard.main().confirmForgetPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmForgetPasswordViewController' could not be loaded from storyboard 'Main' as 'ConfirmForgetPasswordViewController'.") }
        if _R.storyboard.main().confirmPaymentRequestViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmPaymentRequestViewController' could not be loaded from storyboard 'Main' as 'ConfirmPaymentRequestViewController'.") }
        if _R.storyboard.main().confirmPhoneNumberViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmPhoneNumberViewController' could not be loaded from storyboard 'Main' as 'ConfirmPhoneNumberViewController'.") }
        if _R.storyboard.main().confirmPinCodeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmPinCodeViewController' could not be loaded from storyboard 'Main' as 'ConfirmPinCodeViewController'.") }
        if _R.storyboard.main().confirmQRCodePayViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmQRCodePayViewController' could not be loaded from storyboard 'Main' as 'ConfirmQRCodePayViewController'.") }
        if _R.storyboard.main().confirmTransferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmTransferViewController' could not be loaded from storyboard 'Main' as 'ConfirmTransferViewController'.") }
        if _R.storyboard.main().contactsUsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'contactsUsViewController' could not be loaded from storyboard 'Main' as 'ContactsUsViewController'.") }
        if _R.storyboard.main().countriesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'countriesViewController' could not be loaded from storyboard 'Main' as 'CountriesViewController'.") }
        if _R.storyboard.main().createAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createAccountViewController' could not be loaded from storyboard 'Main' as 'CreateAccountViewController'.") }
        if _R.storyboard.main().creditCardAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'creditCardAccountViewController' could not be loaded from storyboard 'Main' as 'CreditCardAccountViewController'.") }
        if _R.storyboard.main().debitCardAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'debitCardAccountViewController' could not be loaded from storyboard 'Main' as 'DebitCardAccountViewController'.") }
        if _R.storyboard.main().editBalanceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editBalanceViewController' could not be loaded from storyboard 'Main' as 'EditBalanceViewController'.") }
        if _R.storyboard.main().editSavedTopupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editSavedTopupViewController' could not be loaded from storyboard 'Main' as 'EditSavedTopupViewController'.") }
        if _R.storyboard.main().errorMessageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'errorMessageViewController' could not be loaded from storyboard 'Main' as 'ErrorMessageViewController'.") }
        if _R.storyboard.main().forgotPasswordViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordViewController' could not be loaded from storyboard 'Main' as 'ForgotPasswordViewController'.") }
        if _R.storyboard.main().homeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeViewController' could not be loaded from storyboard 'Main' as 'HomeViewController'.") }
        if _R.storyboard.main().loadingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loadingViewController' could not be loaded from storyboard 'Main' as 'LoadingViewController'.") }
        if _R.storyboard.main().loginAndSecurityViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginAndSecurityViewController' could not be loaded from storyboard 'Main' as 'LoginAndSecurityViewController'.") }
        if _R.storyboard.main().mainNavigationController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainNavigationController' could not be loaded from storyboard 'Main' as 'MainNavigationController'.") }
        if _R.storyboard.main().moneyTransferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'moneyTransferViewController' could not be loaded from storyboard 'Main' as 'MoneyTransferViewController'.") }
        if _R.storyboard.main().myCardsAndBanksViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myCardsAndBanksViewController' could not be loaded from storyboard 'Main' as 'MyCardsAndBanksViewController'.") }
        if _R.storyboard.main().mySplashViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mySplashViewController' could not be loaded from storyboard 'Main' as 'MySplashViewController'.") }
        if _R.storyboard.main().noqoodyCodeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'noqoodyCodeViewController' could not be loaded from storyboard 'Main' as 'NoqoodyCodeViewController'.") }
        if _R.storyboard.main().notificationsSettingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsSettingsViewController' could not be loaded from storyboard 'Main' as 'NotificationsSettingsViewController'.") }
        if _R.storyboard.main().notificationsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsViewController' could not be loaded from storyboard 'Main' as 'NotificationsViewController'.") }
        if _R.storyboard.main().ooredooAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ooredooAccountViewController' could not be loaded from storyboard 'Main' as 'OoredooAccountViewController'.") }
        if _R.storyboard.main().passportScannerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'passportScannerViewController' could not be loaded from storyboard 'Main' as 'PassportScannerViewController'.") }
        if _R.storyboard.main().passportViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'passportViewController' could not be loaded from storyboard 'Main' as 'PassportViewController'.") }
        if _R.storyboard.main().payViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'payViewController' could not be loaded from storyboard 'Main' as 'PayViewController'.") }
        if _R.storyboard.main().paymentAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentAccountViewController' could not be loaded from storyboard 'Main' as 'PaymentAccountViewController'.") }
        if _R.storyboard.main().personalInfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'personalInfoViewController' could not be loaded from storyboard 'Main' as 'PersonalInfoViewController'.") }
        if _R.storyboard.main().privacyPolicyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'privacyPolicyViewController' could not be loaded from storyboard 'Main' as 'PrivacyPolicyViewController'.") }
        if _R.storyboard.main().qidViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qidViewController' could not be loaded from storyboard 'Main' as 'QIDViewController'.") }
        if _R.storyboard.main().qrScannerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qrScannerViewController' could not be loaded from storyboard 'Main' as 'QRScannerViewController'.") }
        if _R.storyboard.main().refillWalletViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'refillWalletViewController' could not be loaded from storyboard 'Main' as 'RefillWalletViewController'.") }
        if _R.storyboard.main().removePaymentRequestViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'removePaymentRequestViewController' could not be loaded from storyboard 'Main' as 'RemovePaymentRequestViewController'.") }
        if _R.storyboard.main().requestMoneyViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'requestMoneyViewController' could not be loaded from storyboard 'Main' as 'RequestMoneyViewController'.") }
        if _R.storyboard.main().resetPinViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPinViewController' could not be loaded from storyboard 'Main' as 'ResetPinViewController'.") }
        if _R.storyboard.main().selectBeneficiaryPopupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectBeneficiaryPopupViewController' could not be loaded from storyboard 'Main' as 'SelectBeneficiaryPopupViewController'.") }
        if _R.storyboard.main().selectTopupAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'selectTopupAccountViewController' could not be loaded from storyboard 'Main' as 'SelectTopupAccountViewController'.") }
        if _R.storyboard.main().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Main' as 'SettingsViewController'.") }
        if _R.storyboard.main().signInViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInViewController' could not be loaded from storyboard 'Main' as 'SignInViewController'.") }
        if _R.storyboard.main().signUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'Main' as 'SignUpViewController'.") }
        if _R.storyboard.main().signatureViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signatureViewController' could not be loaded from storyboard 'Main' as 'SignatureViewController'.") }
        if _R.storyboard.main().successMessageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'successMessageViewController' could not be loaded from storyboard 'Main' as 'SuccessMessageViewController'.") }
        if _R.storyboard.main().topUpAccountSettingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'topUpAccountSettingsViewController' could not be loaded from storyboard 'Main' as 'TopUpAccountSettingsViewController'.") }
        if _R.storyboard.main().touchIDViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'touchIDViewController' could not be loaded from storyboard 'Main' as 'TouchIDViewController'.") }
        if _R.storyboard.main().transactionsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transactionsViewController' could not be loaded from storyboard 'Main' as 'TransactionsViewController'.") }
        if _R.storyboard.main().transferViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'transferViewController' could not be loaded from storyboard 'Main' as 'TransferViewController'.") }
        if _R.storyboard.main().updateAddressViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updateAddressViewController' could not be loaded from storyboard 'Main' as 'UpdateAddressViewController'.") }
        if _R.storyboard.main().updateEmailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updateEmailViewController' could not be loaded from storyboard 'Main' as 'UpdateEmailViewController'.") }
        if _R.storyboard.main().updateMobileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updateMobileViewController' could not be loaded from storyboard 'Main' as 'UpdateMobileViewController'.") }
        if _R.storyboard.main().updatePhotoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updatePhotoViewController' could not be loaded from storyboard 'Main' as 'UpdatePhotoViewController'.") }
        if _R.storyboard.main().uploadPassportViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'uploadPassportViewController' could not be loaded from storyboard 'Main' as 'UploadPassportViewController'.") }
        if _R.storyboard.main().uploadQIDViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'uploadQIDViewController' could not be loaded from storyboard 'Main' as 'UploadQIDViewController'.") }
        if _R.storyboard.main().viewQIDViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewQIDViewController' could not be loaded from storyboard 'Main' as 'ViewQIDViewController'.") }
        if _R.storyboard.main().vodafoneAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'vodafoneAccountViewController' could not be loaded from storyboard 'Main' as 'VodafoneAccountViewController'.") }
        if _R.storyboard.main().webViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'webViewController' could not be loaded from storyboard 'Main' as 'WebViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct myLibrary: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addBankAccountViewController = StoryboardViewControllerResource<AddBankAccountViewController>(identifier: "AddBankAccountViewController")
      let addDocumentViewController = StoryboardViewControllerResource<AddDocumentViewController>(identifier: "AddDocumentViewController")
      let addIDCardViewController = StoryboardViewControllerResource<AddIDCardViewController>(identifier: "AddIDCardViewController")
      let addPassportViewController = StoryboardViewControllerResource<AddPassportViewController>(identifier: "AddPassportViewController")
      let addPaymentCardViewController = StoryboardViewControllerResource<AddPaymentCardViewController>(identifier: "AddPaymentCardViewController")
      let addPinViewController = StoryboardViewControllerResource<AddPinViewController>(identifier: "AddPinViewController")
      let bundle = R.hostingBundle
      let cardDetailsViewController = StoryboardViewControllerResource<CardDetailsViewController>(identifier: "CardDetailsViewController")
      let changePinViewController = StoryboardViewControllerResource<ChangePinViewController>(identifier: "ChangePinViewController")
      let confirmLibraryPinViewController = StoryboardViewControllerResource<ConfirmLibraryPinViewController>(identifier: "ConfirmLibraryPinViewController")
      let documentDetailsViewController = StoryboardViewControllerResource<DocumentDetailsViewController>(identifier: "DocumentDetailsViewController")
      let documentsViewController = StoryboardViewControllerResource<DocumentsViewController>(identifier: "DocumentsViewController")
      let idLicenseDetailsViewController = StoryboardViewControllerResource<IDLicenseDetailsViewController>(identifier: "IDLicenseDetailsViewController")
      let loyaltyCardViewController = StoryboardViewControllerResource<LoyaltyCardViewController>(identifier: "LoyaltyCardViewController")
      let myLibraryViewController = StoryboardViewControllerResource<MyLibraryViewController>(identifier: "MyLibraryViewController")
      let name = "MyLibrary"
      let passportDetailsViewController = StoryboardViewControllerResource<PassportDetailsViewController>(identifier: "PassportDetailsViewController")
      let payViaCashViewController = StoryboardViewControllerResource<PayViaCashViewController>(identifier: "PayViaCashViewController")

      func addBankAccountViewController(_: Void = ()) -> AddBankAccountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addBankAccountViewController)
      }

      func addDocumentViewController(_: Void = ()) -> AddDocumentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addDocumentViewController)
      }

      func addIDCardViewController(_: Void = ()) -> AddIDCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addIDCardViewController)
      }

      func addPassportViewController(_: Void = ()) -> AddPassportViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addPassportViewController)
      }

      func addPaymentCardViewController(_: Void = ()) -> AddPaymentCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addPaymentCardViewController)
      }

      func addPinViewController(_: Void = ()) -> AddPinViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addPinViewController)
      }

      func cardDetailsViewController(_: Void = ()) -> CardDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cardDetailsViewController)
      }

      func changePinViewController(_: Void = ()) -> ChangePinViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePinViewController)
      }

      func confirmLibraryPinViewController(_: Void = ()) -> ConfirmLibraryPinViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmLibraryPinViewController)
      }

      func documentDetailsViewController(_: Void = ()) -> DocumentDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: documentDetailsViewController)
      }

      func documentsViewController(_: Void = ()) -> DocumentsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: documentsViewController)
      }

      func idLicenseDetailsViewController(_: Void = ()) -> IDLicenseDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: idLicenseDetailsViewController)
      }

      func loyaltyCardViewController(_: Void = ()) -> LoyaltyCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loyaltyCardViewController)
      }

      func myLibraryViewController(_: Void = ()) -> MyLibraryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myLibraryViewController)
      }

      func passportDetailsViewController(_: Void = ()) -> PassportDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: passportDetailsViewController)
      }

      func payViaCashViewController(_: Void = ()) -> PayViaCashViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: payViaCashViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bg_add_bank", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_add_bank' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_analytics", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_analytics' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_btn_pay", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_btn_pay' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_passport_details", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_passport_details' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_pay_via_cash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_pay_via_cash' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_qatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_qatar' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "clock.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'clock.fill' is used in storyboard 'MyLibrary', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'eye' is used in storyboard 'MyLibrary', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "ic_arrow_down_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_down_gray' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_bank_account_library", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_bank_account_library' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_chip_add_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_chip_add_card' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_clock_passport_details", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_clock_passport_details' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_credit_card_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_credit_card_white' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_debit_card_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_debit_card_white' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_documents_library", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_documents_library' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_empty_my_library", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_empty_my_library' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_empty_tab_my_library", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_empty_tab_my_library' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_id_card_library", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_id_card_library' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_license_library", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_license_library' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_loyalty_card_library", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_loyalty_card_library' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_mastercard_card_details", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_mastercard_card_details' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_passport_library", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_passport_library' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_plus_my_library", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_plus_my_library' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_scan_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_scan_card' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_take_photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_take_photo' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_under_construction_pay_via_cash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_under_construction_pay_via_cash' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_upload_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_upload_transfer' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "img_fill_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_fill_card' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "trash") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'trash' is used in storyboard 'MyLibrary', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "app_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'app_color' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
          if UIKit.UIColor(named: "brown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'brown' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
          if UIKit.UIColor(named: "card_number", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'card_number' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
          if UIKit.UIColor(named: "dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_gray' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
          if UIKit.UIColor(named: "dark_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_red' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
          if UIKit.UIColor(named: "light_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light_gray' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
          if UIKit.UIColor(named: "light_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light_red' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
          if UIKit.UIColor(named: "main_bg_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'main_bg_blue' is used in storyboard 'MyLibrary', but couldn't be loaded.") }
        }
        if _R.storyboard.myLibrary().addBankAccountViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addBankAccountViewController' could not be loaded from storyboard 'MyLibrary' as 'AddBankAccountViewController'.") }
        if _R.storyboard.myLibrary().addDocumentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addDocumentViewController' could not be loaded from storyboard 'MyLibrary' as 'AddDocumentViewController'.") }
        if _R.storyboard.myLibrary().addIDCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addIDCardViewController' could not be loaded from storyboard 'MyLibrary' as 'AddIDCardViewController'.") }
        if _R.storyboard.myLibrary().addPassportViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addPassportViewController' could not be loaded from storyboard 'MyLibrary' as 'AddPassportViewController'.") }
        if _R.storyboard.myLibrary().addPaymentCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addPaymentCardViewController' could not be loaded from storyboard 'MyLibrary' as 'AddPaymentCardViewController'.") }
        if _R.storyboard.myLibrary().addPinViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addPinViewController' could not be loaded from storyboard 'MyLibrary' as 'AddPinViewController'.") }
        if _R.storyboard.myLibrary().cardDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cardDetailsViewController' could not be loaded from storyboard 'MyLibrary' as 'CardDetailsViewController'.") }
        if _R.storyboard.myLibrary().changePinViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePinViewController' could not be loaded from storyboard 'MyLibrary' as 'ChangePinViewController'.") }
        if _R.storyboard.myLibrary().confirmLibraryPinViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmLibraryPinViewController' could not be loaded from storyboard 'MyLibrary' as 'ConfirmLibraryPinViewController'.") }
        if _R.storyboard.myLibrary().documentDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'documentDetailsViewController' could not be loaded from storyboard 'MyLibrary' as 'DocumentDetailsViewController'.") }
        if _R.storyboard.myLibrary().documentsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'documentsViewController' could not be loaded from storyboard 'MyLibrary' as 'DocumentsViewController'.") }
        if _R.storyboard.myLibrary().idLicenseDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'idLicenseDetailsViewController' could not be loaded from storyboard 'MyLibrary' as 'IDLicenseDetailsViewController'.") }
        if _R.storyboard.myLibrary().loyaltyCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loyaltyCardViewController' could not be loaded from storyboard 'MyLibrary' as 'LoyaltyCardViewController'.") }
        if _R.storyboard.myLibrary().myLibraryViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myLibraryViewController' could not be loaded from storyboard 'MyLibrary' as 'MyLibraryViewController'.") }
        if _R.storyboard.myLibrary().passportDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'passportDetailsViewController' could not be loaded from storyboard 'MyLibrary' as 'PassportDetailsViewController'.") }
        if _R.storyboard.myLibrary().payViaCashViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'payViaCashViewController' could not be loaded from storyboard 'MyLibrary' as 'PayViaCashViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct others: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addKahramaaNumberViewController = StoryboardViewControllerResource<AddKahramaaNumberViewController>(identifier: "AddKahramaaNumberViewController")
      let addPhoneBillsCardViewController = StoryboardViewControllerResource<AddPhoneBillsCardViewController>(identifier: "AddPhoneBillsCardViewController")
      let addQatarCoolCardViewController = StoryboardViewControllerResource<AddQatarCoolCardViewController>(identifier: "AddQatarCoolCardViewController")
      let bundle = R.hostingBundle
      let createKahramaaGroupViewController = StoryboardViewControllerResource<CreateKahramaaGroupViewController>(identifier: "CreateKahramaaGroupViewController")
      let createPhoneBillsGroupViewController = StoryboardViewControllerResource<CreatePhoneBillsGroupViewController>(identifier: "CreatePhoneBillsGroupViewController")
      let createQatarCoolGroupViewController = StoryboardViewControllerResource<CreateQatarCoolGroupViewController>(identifier: "CreateQatarCoolGroupViewController")
      let kahramaaBillsViewController = StoryboardViewControllerResource<KahramaaBillsViewController>(identifier: "KahramaaBillsViewController")
      let name = "Others"
      let payOnTheGoKahramaaViewController = StoryboardViewControllerResource<PayOnTheGoKahramaaViewController>(identifier: "PayOnTheGoKahramaaViewController")
      let payOnTheGoPhoneBillsViewController = StoryboardViewControllerResource<PayOnTheGoPhoneBillsViewController>(identifier: "PayOnTheGoPhoneBillsViewController")
      let payOnTheGoQatarCoolViewController = StoryboardViewControllerResource<PayOnTheGoQatarCoolViewController>(identifier: "PayOnTheGoQatarCoolViewController")
      let phoneBillsViewController = StoryboardViewControllerResource<PhoneBillsViewController>(identifier: "PhoneBillsViewController")
      let phoneOoredooViewController = StoryboardViewControllerResource<PhoneOoredooViewController>(identifier: "PhoneOoredooViewController")
      let phoneVodafoneViewController = StoryboardViewControllerResource<PhoneVodafoneViewController>(identifier: "PhoneVodafoneViewController")
      let qMobileViewController = StoryboardViewControllerResource<QMobileViewController>(identifier: "QMobileViewController")
      let qatarCoolViewController = StoryboardViewControllerResource<QatarCoolViewController>(identifier: "QatarCoolViewController")

      func addKahramaaNumberViewController(_: Void = ()) -> AddKahramaaNumberViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addKahramaaNumberViewController)
      }

      func addPhoneBillsCardViewController(_: Void = ()) -> AddPhoneBillsCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addPhoneBillsCardViewController)
      }

      func addQatarCoolCardViewController(_: Void = ()) -> AddQatarCoolCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addQatarCoolCardViewController)
      }

      func createKahramaaGroupViewController(_: Void = ()) -> CreateKahramaaGroupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createKahramaaGroupViewController)
      }

      func createPhoneBillsGroupViewController(_: Void = ()) -> CreatePhoneBillsGroupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createPhoneBillsGroupViewController)
      }

      func createQatarCoolGroupViewController(_: Void = ()) -> CreateQatarCoolGroupViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createQatarCoolGroupViewController)
      }

      func kahramaaBillsViewController(_: Void = ()) -> KahramaaBillsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: kahramaaBillsViewController)
      }

      func payOnTheGoKahramaaViewController(_: Void = ()) -> PayOnTheGoKahramaaViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: payOnTheGoKahramaaViewController)
      }

      func payOnTheGoPhoneBillsViewController(_: Void = ()) -> PayOnTheGoPhoneBillsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: payOnTheGoPhoneBillsViewController)
      }

      func payOnTheGoQatarCoolViewController(_: Void = ()) -> PayOnTheGoQatarCoolViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: payOnTheGoQatarCoolViewController)
      }

      func phoneBillsViewController(_: Void = ()) -> PhoneBillsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: phoneBillsViewController)
      }

      func phoneOoredooViewController(_: Void = ()) -> PhoneOoredooViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: phoneOoredooViewController)
      }

      func phoneVodafoneViewController(_: Void = ()) -> PhoneVodafoneViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: phoneVodafoneViewController)
      }

      func qMobileViewController(_: Void = ()) -> QMobileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qMobileViewController)
      }

      func qatarCoolViewController(_: Void = ()) -> QatarCoolViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: qatarCoolViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bg_add_kahramaa_bills", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_add_kahramaa_bills' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_add_phone_bills", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_add_phone_bills' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_btn_qmobile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_btn_qmobile' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_kahramaa_bills", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_kahramaa_bills' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_ooredoo_phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_ooredoo_phone' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_pay_and_go", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_pay_and_go' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_pay_on_go_phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_pay_on_go_phone' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_pay_on_the_go_qatar_cool", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_pay_on_the_go_qatar_cool' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_phone_bills", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_phone_bills' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_qatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_qatar' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_qatar_cool", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_qatar_cool' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_qmobile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_qmobile' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_vodafone_phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_vodafone_phone' is used in storyboard 'Others', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "gearshape") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'gearshape' is used in storyboard 'Others', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "ic_add_kahramaa", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_kahramaa' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_number_phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_number_phone' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add_qatar_cool", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_qatar_cool' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_down_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_down_gray' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_black' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close_reset_pin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close_reset_pin' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_create_group", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_create_group' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_create_group_phone_bills", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_create_group_phone_bills' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_create_group_qatar_cool", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_create_group_qatar_cool' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_credit_card_white", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_credit_card_white' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_debit_card_payAndGo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_debit_card_payAndGo' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit_qmobile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit_qmobile' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_empty_numbers_kahramaa", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_empty_numbers_kahramaa' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_go_create_group", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_go_create_group' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pay_on_the_go", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pay_on_the_go' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_wallet_balance", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_wallet_balance' is used in storyboard 'Others', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_qatar_cool", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_qatar_cool' is used in storyboard 'Others', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'plus' is used in storyboard 'Others', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "trash") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'trash' is used in storyboard 'Others', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_gray' is used in storyboard 'Others', but couldn't be loaded.") }
          if UIKit.UIColor(named: "dark_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_red' is used in storyboard 'Others', but couldn't be loaded.") }
          if UIKit.UIColor(named: "kahramaa_dark_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'kahramaa_dark_blue' is used in storyboard 'Others', but couldn't be loaded.") }
          if UIKit.UIColor(named: "label_dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'label_dark_gray' is used in storyboard 'Others', but couldn't be loaded.") }
          if UIKit.UIColor(named: "light_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light_blue' is used in storyboard 'Others', but couldn't be loaded.") }
          if UIKit.UIColor(named: "light_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light_gray' is used in storyboard 'Others', but couldn't be loaded.") }
          if UIKit.UIColor(named: "my_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'my_red' is used in storyboard 'Others', but couldn't be loaded.") }
          if UIKit.UIColor(named: "orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'orange' is used in storyboard 'Others', but couldn't be loaded.") }
          if UIKit.UIColor(named: "very_dark_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'very_dark_blue' is used in storyboard 'Others', but couldn't be loaded.") }
        }
        if _R.storyboard.others().addKahramaaNumberViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addKahramaaNumberViewController' could not be loaded from storyboard 'Others' as 'AddKahramaaNumberViewController'.") }
        if _R.storyboard.others().addPhoneBillsCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addPhoneBillsCardViewController' could not be loaded from storyboard 'Others' as 'AddPhoneBillsCardViewController'.") }
        if _R.storyboard.others().addQatarCoolCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addQatarCoolCardViewController' could not be loaded from storyboard 'Others' as 'AddQatarCoolCardViewController'.") }
        if _R.storyboard.others().createKahramaaGroupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createKahramaaGroupViewController' could not be loaded from storyboard 'Others' as 'CreateKahramaaGroupViewController'.") }
        if _R.storyboard.others().createPhoneBillsGroupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createPhoneBillsGroupViewController' could not be loaded from storyboard 'Others' as 'CreatePhoneBillsGroupViewController'.") }
        if _R.storyboard.others().createQatarCoolGroupViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createQatarCoolGroupViewController' could not be loaded from storyboard 'Others' as 'CreateQatarCoolGroupViewController'.") }
        if _R.storyboard.others().kahramaaBillsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'kahramaaBillsViewController' could not be loaded from storyboard 'Others' as 'KahramaaBillsViewController'.") }
        if _R.storyboard.others().payOnTheGoKahramaaViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'payOnTheGoKahramaaViewController' could not be loaded from storyboard 'Others' as 'PayOnTheGoKahramaaViewController'.") }
        if _R.storyboard.others().payOnTheGoPhoneBillsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'payOnTheGoPhoneBillsViewController' could not be loaded from storyboard 'Others' as 'PayOnTheGoPhoneBillsViewController'.") }
        if _R.storyboard.others().payOnTheGoQatarCoolViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'payOnTheGoQatarCoolViewController' could not be loaded from storyboard 'Others' as 'PayOnTheGoQatarCoolViewController'.") }
        if _R.storyboard.others().phoneBillsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'phoneBillsViewController' could not be loaded from storyboard 'Others' as 'PhoneBillsViewController'.") }
        if _R.storyboard.others().phoneOoredooViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'phoneOoredooViewController' could not be loaded from storyboard 'Others' as 'PhoneOoredooViewController'.") }
        if _R.storyboard.others().phoneVodafoneViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'phoneVodafoneViewController' could not be loaded from storyboard 'Others' as 'PhoneVodafoneViewController'.") }
        if _R.storyboard.others().qMobileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qMobileViewController' could not be loaded from storyboard 'Others' as 'QMobileViewController'.") }
        if _R.storyboard.others().qatarCoolViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'qatarCoolViewController' could not be loaded from storyboard 'Others' as 'QatarCoolViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct store: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addProductViewController = StoryboardViewControllerResource<AddProductViewController>(identifier: "AddProductViewController")
      let bundle = R.hostingBundle
      let createInvoice2ViewController = StoryboardViewControllerResource<CreateInvoice2ViewController>(identifier: "CreateInvoice2ViewController")
      let createInvoiceViewController = StoryboardViewControllerResource<CreateInvoiceViewController>(identifier: "CreateInvoiceViewController")
      let createShopViewController = StoryboardViewControllerResource<CreateShopViewController>(identifier: "CreateShopViewController")
      let invoicesFilterViewController = StoryboardViewControllerResource<InvoicesFilterViewController>(identifier: "InvoicesFilterViewController")
      let invoicesViewController = StoryboardViewControllerResource<InvoicesViewController>(identifier: "InvoicesViewController")
      let myOrdersViewController = StoryboardViewControllerResource<MyOrdersViewController>(identifier: "MyOrdersViewController")
      let myProductsViewController = StoryboardViewControllerResource<MyProductsViewController>(identifier: "MyProductsViewController")
      let myShopsViewController = StoryboardViewControllerResource<MyShopsViewController>(identifier: "MyShopsViewController")
      let name = "Store"
      let orderDetailsViewController = StoryboardViewControllerResource<OrderDetailsViewController>(identifier: "OrderDetailsViewController")
      let previewOrderViewController = StoryboardViewControllerResource<PreviewOrderViewController>(identifier: "PreviewOrderViewController")
      let publicProductsViewController = StoryboardViewControllerResource<PublicProductsViewController>(identifier: "PublicProductsViewController")
      let sendOrderViewController = StoryboardViewControllerResource<SendOrderViewController>(identifier: "SendOrderViewController")
      let shopProfileViewController = StoryboardViewControllerResource<ShopProfileViewController>(identifier: "ShopProfileViewController")
      let uploadShopBannerViewController = StoryboardViewControllerResource<UploadShopBannerViewController>(identifier: "UploadShopBannerViewController")
      let uploadShopLogoViewController = StoryboardViewControllerResource<UploadShopLogoViewController>(identifier: "UploadShopLogoViewController")

      func addProductViewController(_: Void = ()) -> AddProductViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addProductViewController)
      }

      func createInvoice2ViewController(_: Void = ()) -> CreateInvoice2ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createInvoice2ViewController)
      }

      func createInvoiceViewController(_: Void = ()) -> CreateInvoiceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createInvoiceViewController)
      }

      func createShopViewController(_: Void = ()) -> CreateShopViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createShopViewController)
      }

      func invoicesFilterViewController(_: Void = ()) -> InvoicesFilterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: invoicesFilterViewController)
      }

      func invoicesViewController(_: Void = ()) -> InvoicesViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: invoicesViewController)
      }

      func myOrdersViewController(_: Void = ()) -> MyOrdersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myOrdersViewController)
      }

      func myProductsViewController(_: Void = ()) -> MyProductsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myProductsViewController)
      }

      func myShopsViewController(_: Void = ()) -> MyShopsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myShopsViewController)
      }

      func orderDetailsViewController(_: Void = ()) -> OrderDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderDetailsViewController)
      }

      func previewOrderViewController(_: Void = ()) -> PreviewOrderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: previewOrderViewController)
      }

      func publicProductsViewController(_: Void = ()) -> PublicProductsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: publicProductsViewController)
      }

      func sendOrderViewController(_: Void = ()) -> SendOrderViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sendOrderViewController)
      }

      func shopProfileViewController(_: Void = ()) -> ShopProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopProfileViewController)
      }

      func uploadShopBannerViewController(_: Void = ()) -> UploadShopBannerViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: uploadShopBannerViewController)
      }

      func uploadShopLogoViewController(_: Void = ()) -> UploadShopLogoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: uploadShopLogoViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bbg_btn_my_shop_add_item", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bbg_btn_my_shop_add_item' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_create_invoice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_create_invoice' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_create_invoice2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_create_invoice2' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_create_shop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_create_shop' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_invoices", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_invoices' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_my_orders", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_my_orders' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_my_shop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_my_shop' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_my_shops", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_my_shops' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_preview_invoice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_preview_invoice' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_public_products", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_public_products' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_qatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_qatar' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_shop_profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_shop_profile' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_square_upload_passport", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_square_upload_passport' is used in storyboard 'Store', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'eye' is used in storyboard 'Store', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "ic_add_my_shops", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add_my_shops' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_down_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_down_gray' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_arrow_right_kahramaa", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_right_kahramaa' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_banner_shop_profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_banner_shop_profile' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_calender", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calender' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_camera_shop_profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_camera_shop_profile' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit_my_shops", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit_my_shops' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_email_red_send_invoice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email_red_send_invoice' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_empty_orders", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_empty_orders' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_empty_products", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_empty_products' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_filter_invoices", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_filter_invoices' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_invoice_my_shop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_invoice_my_shop' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_invoices_my_shops", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_invoices_my_shops' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_link_red_send_invoice", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_link_red_send_invoice' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo_shop_profile", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo_shop_profile' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_my_shop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_my_shop' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_search_my_shops", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_search_my_shops' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_share_my_shops", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_share_my_shops' is used in storyboard 'Store', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_take_photo_my_shop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_take_photo_my_shop' is used in storyboard 'Store', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "trash") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'trash' is used in storyboard 'Store', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Yellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Yellow' is used in storyboard 'Store', but couldn't be loaded.") }
          if UIKit.UIColor(named: "app_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'app_color' is used in storyboard 'Store', but couldn't be loaded.") }
          if UIKit.UIColor(named: "brown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'brown' is used in storyboard 'Store', but couldn't be loaded.") }
          if UIKit.UIColor(named: "dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_gray' is used in storyboard 'Store', but couldn't be loaded.") }
          if UIKit.UIColor(named: "dark_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_red' is used in storyboard 'Store', but couldn't be loaded.") }
          if UIKit.UIColor(named: "light_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light_gray' is used in storyboard 'Store', but couldn't be loaded.") }
          if UIKit.UIColor(named: "light_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light_red' is used in storyboard 'Store', but couldn't be loaded.") }
          if UIKit.UIColor(named: "orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'orange' is used in storyboard 'Store', but couldn't be loaded.") }
          if UIKit.UIColor(named: "shop_bg_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'shop_bg_gray' is used in storyboard 'Store', but couldn't be loaded.") }
        }
        if _R.storyboard.store().addProductViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addProductViewController' could not be loaded from storyboard 'Store' as 'AddProductViewController'.") }
        if _R.storyboard.store().createInvoice2ViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createInvoice2ViewController' could not be loaded from storyboard 'Store' as 'CreateInvoice2ViewController'.") }
        if _R.storyboard.store().createInvoiceViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createInvoiceViewController' could not be loaded from storyboard 'Store' as 'CreateInvoiceViewController'.") }
        if _R.storyboard.store().createShopViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createShopViewController' could not be loaded from storyboard 'Store' as 'CreateShopViewController'.") }
        if _R.storyboard.store().invoicesFilterViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'invoicesFilterViewController' could not be loaded from storyboard 'Store' as 'InvoicesFilterViewController'.") }
        if _R.storyboard.store().invoicesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'invoicesViewController' could not be loaded from storyboard 'Store' as 'InvoicesViewController'.") }
        if _R.storyboard.store().myOrdersViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myOrdersViewController' could not be loaded from storyboard 'Store' as 'MyOrdersViewController'.") }
        if _R.storyboard.store().myProductsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myProductsViewController' could not be loaded from storyboard 'Store' as 'MyProductsViewController'.") }
        if _R.storyboard.store().myShopsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myShopsViewController' could not be loaded from storyboard 'Store' as 'MyShopsViewController'.") }
        if _R.storyboard.store().orderDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderDetailsViewController' could not be loaded from storyboard 'Store' as 'OrderDetailsViewController'.") }
        if _R.storyboard.store().previewOrderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'previewOrderViewController' could not be loaded from storyboard 'Store' as 'PreviewOrderViewController'.") }
        if _R.storyboard.store().publicProductsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'publicProductsViewController' could not be loaded from storyboard 'Store' as 'PublicProductsViewController'.") }
        if _R.storyboard.store().sendOrderViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sendOrderViewController' could not be loaded from storyboard 'Store' as 'SendOrderViewController'.") }
        if _R.storyboard.store().shopProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopProfileViewController' could not be loaded from storyboard 'Store' as 'ShopProfileViewController'.") }
        if _R.storyboard.store().uploadShopBannerViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'uploadShopBannerViewController' could not be loaded from storyboard 'Store' as 'UploadShopBannerViewController'.") }
        if _R.storyboard.store().uploadShopLogoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'uploadShopLogoViewController' could not be loaded from storyboard 'Store' as 'UploadShopLogoViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct transports: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addKarwaSmartCardViewController = StoryboardViewControllerResource<AddKarwaBusCardViewController>(identifier: "AddKarwaSmartCardViewController")
      let addMetroRailCardViewController = StoryboardViewControllerResource<MetroRailCardsViewController>(identifier: "AddMetroRailCardViewController")
      let addTravelCardViewController = StoryboardViewControllerResource<AddTravelCardViewController>(identifier: "AddTravelCardViewController")
      let bundle = R.hostingBundle
      let dropOffLocationViewController = StoryboardViewControllerResource<DropOffLocationViewController>(identifier: "DropOffLocationViewController")
      let faresAndTravelCardsViewController = StoryboardViewControllerResource<FaresAndTravelCardsViewController>(identifier: "FaresAndTravelCardsViewController")
      let karwaBusViewController = StoryboardViewControllerResource<KarwaBusViewController>(identifier: "KarwaBusViewController")
      let karwaSmartCardDetailsViewController = StoryboardViewControllerResource<KarwaBusCardDetailsViewController>(identifier: "KarwaSmartCardDetailsViewController")
      let karwaTaxiMapViewController = StoryboardViewControllerResource<KarwaTaxiMapViewController>(identifier: "KarwaTaxiMapViewController")
      let limousineViewController = StoryboardViewControllerResource<LimousineViewController>(identifier: "LimousineViewController")
      let metroRailViewController = StoryboardViewControllerResource<MetroRailViewController>(identifier: "MetroRailViewController")
      let name = "Transports"
      let parkingsLocationViewController = StoryboardViewControllerResource<ParkingsLocationViewController>(identifier: "ParkingsLocationViewController")
      let parkingsPaymentViewController = StoryboardViewControllerResource<ParkingsPaymentViewController>(identifier: "ParkingsPaymentViewController")
      let parkingsViewController = StoryboardViewControllerResource<ParkingsViewController>(identifier: "ParkingsViewController")
      let payTripViewController = StoryboardViewControllerResource<PayTripViewController>(identifier: "PayTripViewController")
      let payYourParkingViewController = StoryboardViewControllerResource<PayYourParkingViewController>(identifier: "PayYourParkingViewController")
      let pickUpLocationViewController = StoryboardViewControllerResource<PickUpLocationViewController>(identifier: "PickUpLocationViewController")
      let refillKarwaSmartCardViewController = StoryboardViewControllerResource<RefillKarwaBusCardViewController>(identifier: "RefillKarwaSmartCardViewController")
      let refillMetroCardViewController = StoryboardViewControllerResource<RefillMetroCardViewController>(identifier: "RefillMetroCardViewController")
      let requestCarViewController = StoryboardViewControllerResource<RequestCarViewController>(identifier: "RequestCarViewController")

      func addKarwaSmartCardViewController(_: Void = ()) -> AddKarwaBusCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addKarwaSmartCardViewController)
      }

      func addMetroRailCardViewController(_: Void = ()) -> MetroRailCardsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addMetroRailCardViewController)
      }

      func addTravelCardViewController(_: Void = ()) -> AddTravelCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addTravelCardViewController)
      }

      func dropOffLocationViewController(_: Void = ()) -> DropOffLocationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dropOffLocationViewController)
      }

      func faresAndTravelCardsViewController(_: Void = ()) -> FaresAndTravelCardsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: faresAndTravelCardsViewController)
      }

      func karwaBusViewController(_: Void = ()) -> KarwaBusViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: karwaBusViewController)
      }

      func karwaSmartCardDetailsViewController(_: Void = ()) -> KarwaBusCardDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: karwaSmartCardDetailsViewController)
      }

      func karwaTaxiMapViewController(_: Void = ()) -> KarwaTaxiMapViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: karwaTaxiMapViewController)
      }

      func limousineViewController(_: Void = ()) -> LimousineViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: limousineViewController)
      }

      func metroRailViewController(_: Void = ()) -> MetroRailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: metroRailViewController)
      }

      func parkingsLocationViewController(_: Void = ()) -> ParkingsLocationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingsLocationViewController)
      }

      func parkingsPaymentViewController(_: Void = ()) -> ParkingsPaymentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingsPaymentViewController)
      }

      func parkingsViewController(_: Void = ()) -> ParkingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: parkingsViewController)
      }

      func payTripViewController(_: Void = ()) -> PayTripViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: payTripViewController)
      }

      func payYourParkingViewController(_: Void = ()) -> PayYourParkingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: payYourParkingViewController)
      }

      func pickUpLocationViewController(_: Void = ()) -> PickUpLocationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: pickUpLocationViewController)
      }

      func refillKarwaSmartCardViewController(_: Void = ()) -> RefillKarwaBusCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: refillKarwaSmartCardViewController)
      }

      func refillMetroCardViewController(_: Void = ()) -> RefillMetroCardViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: refillMetroCardViewController)
      }

      func requestCarViewController(_: Void = ()) -> RequestCarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: requestCarViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "bg_bottom_karwa", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_bottom_karwa' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_button_parkings_payment", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_button_parkings_payment' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_circle_payment_parkings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_circle_payment_parkings' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_circle_ticket_parkings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_circle_ticket_parkings' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_drop_off_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_drop_off_location' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_invoices", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_invoices' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_karwa_card_details", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_karwa_card_details' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_metro_rail", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_metro_rail' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_parkings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_parkings' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_pay_trip", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_pay_trip' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_payment_parkings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_payment_parkings' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bg_qatar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bg_qatar' is used in storyboard 'Transports', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "house.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'house.fill' is used in storyboard 'Transports', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "ic_arrow_right_transfer", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_arrow_right_transfer' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_avatar_photo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_avatar_photo' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_back_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_back_black' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_call_limousine", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_call_limousine' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_card_karwa", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_card_karwa' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_card_metro", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_card_metro' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_cash_request_car", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_cash_request_car' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_ellipses", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_ellipses' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_empty_limousine", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_empty_limousine' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_karwa_smart_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_karwa_smart_card' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_line_drop_off_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_line_drop_off_location' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_location_drop_off_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_location_drop_off_location' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_map_drop_off_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_map_drop_off_location' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_menu_drop_off_location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_menu_drop_off_location' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_metro_rail_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_metro_rail_card' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_or_refill_karwa_card", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_or_refill_karwa_card' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_other_services_parkings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_other_services_parkings' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_passenger_request_car", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_passenger_request_car' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pay_your_parking", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pay_your_parking' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_promo_request_car", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_promo_request_car' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_redeem_code_parkings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_redeem_code_parkings' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_scan_barcode_parkings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_scan_barcode_parkings' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_scan_qr_parkings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_scan_qr_parkings' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_schedule_request_car", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_schedule_request_car' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_star_pay_trip", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_star_pay_trip' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_time_parkings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_time_parkings' is used in storyboard 'Transports', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo_parkings", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo_parkings' is used in storyboard 'Transports', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "magnifyingglass") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'magnifyingglass' is used in storyboard 'Transports', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "Yellow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Yellow' is used in storyboard 'Transports', but couldn't be loaded.") }
          if UIKit.UIColor(named: "brown", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'brown' is used in storyboard 'Transports', but couldn't be loaded.") }
          if UIKit.UIColor(named: "dark_blue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_blue' is used in storyboard 'Transports', but couldn't be loaded.") }
          if UIKit.UIColor(named: "dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_gray' is used in storyboard 'Transports', but couldn't be loaded.") }
          if UIKit.UIColor(named: "dark_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'dark_red' is used in storyboard 'Transports', but couldn't be loaded.") }
          if UIKit.UIColor(named: "gold", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gold' is used in storyboard 'Transports', but couldn't be loaded.") }
          if UIKit.UIColor(named: "label_dark_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'label_dark_gray' is used in storyboard 'Transports', but couldn't be loaded.") }
          if UIKit.UIColor(named: "label_light_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'label_light_gray' is used in storyboard 'Transports', but couldn't be loaded.") }
          if UIKit.UIColor(named: "light_gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light_gray' is used in storyboard 'Transports', but couldn't be loaded.") }
          if UIKit.UIColor(named: "light_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'light_red' is used in storyboard 'Transports', but couldn't be loaded.") }
          if UIKit.UIColor(named: "my_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'my_red' is used in storyboard 'Transports', but couldn't be loaded.") }
          if UIKit.UIColor(named: "orange", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'orange' is used in storyboard 'Transports', but couldn't be loaded.") }
          if UIKit.UIColor(named: "parkings_dark_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'parkings_dark_red' is used in storyboard 'Transports', but couldn't be loaded.") }
          if UIKit.UIColor(named: "parkings_light_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'parkings_light_red' is used in storyboard 'Transports', but couldn't be loaded.") }
        }
        if _R.storyboard.transports().addKarwaSmartCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addKarwaSmartCardViewController' could not be loaded from storyboard 'Transports' as 'AddKarwaSmartCardViewController'.") }
        if _R.storyboard.transports().addMetroRailCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addMetroRailCardViewController' could not be loaded from storyboard 'Transports' as 'AddMetroRailCardViewController'.") }
        if _R.storyboard.transports().addTravelCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addTravelCardViewController' could not be loaded from storyboard 'Transports' as 'AddTravelCardViewController'.") }
        if _R.storyboard.transports().dropOffLocationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dropOffLocationViewController' could not be loaded from storyboard 'Transports' as 'DropOffLocationViewController'.") }
        if _R.storyboard.transports().faresAndTravelCardsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'faresAndTravelCardsViewController' could not be loaded from storyboard 'Transports' as 'FaresAndTravelCardsViewController'.") }
        if _R.storyboard.transports().karwaBusViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'karwaBusViewController' could not be loaded from storyboard 'Transports' as 'KarwaBusViewController'.") }
        if _R.storyboard.transports().karwaSmartCardDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'karwaSmartCardDetailsViewController' could not be loaded from storyboard 'Transports' as 'KarwaSmartCardDetailsViewController'.") }
        if _R.storyboard.transports().karwaTaxiMapViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'karwaTaxiMapViewController' could not be loaded from storyboard 'Transports' as 'KarwaTaxiMapViewController'.") }
        if _R.storyboard.transports().limousineViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'limousineViewController' could not be loaded from storyboard 'Transports' as 'LimousineViewController'.") }
        if _R.storyboard.transports().metroRailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'metroRailViewController' could not be loaded from storyboard 'Transports' as 'MetroRailViewController'.") }
        if _R.storyboard.transports().parkingsLocationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingsLocationViewController' could not be loaded from storyboard 'Transports' as 'ParkingsLocationViewController'.") }
        if _R.storyboard.transports().parkingsPaymentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingsPaymentViewController' could not be loaded from storyboard 'Transports' as 'ParkingsPaymentViewController'.") }
        if _R.storyboard.transports().parkingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'parkingsViewController' could not be loaded from storyboard 'Transports' as 'ParkingsViewController'.") }
        if _R.storyboard.transports().payTripViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'payTripViewController' could not be loaded from storyboard 'Transports' as 'PayTripViewController'.") }
        if _R.storyboard.transports().payYourParkingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'payYourParkingViewController' could not be loaded from storyboard 'Transports' as 'PayYourParkingViewController'.") }
        if _R.storyboard.transports().pickUpLocationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'pickUpLocationViewController' could not be loaded from storyboard 'Transports' as 'PickUpLocationViewController'.") }
        if _R.storyboard.transports().refillKarwaSmartCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'refillKarwaSmartCardViewController' could not be loaded from storyboard 'Transports' as 'RefillKarwaSmartCardViewController'.") }
        if _R.storyboard.transports().refillMetroCardViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'refillMetroCardViewController' could not be loaded from storyboard 'Transports' as 'RefillMetroCardViewController'.") }
        if _R.storyboard.transports().requestCarViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'requestCarViewController' could not be loaded from storyboard 'Transports' as 'RequestCarViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
